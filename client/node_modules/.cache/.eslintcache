[{"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js":"1","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js":"2","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js":"3","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js":"4","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js":"5","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js":"6","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js":"7","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js":"8","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js":"9","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js":"10","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js":"11","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js":"12","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js":"13","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js":"14","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js":"15","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js":"16","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js":"17","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js":"18","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Login.js":"19","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js":"20","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js":"21","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js":"22","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js":"23","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js":"24","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js":"25","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js":"26","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js":"27","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js":"28"},{"size":718,"mtime":1624614279324,"results":"29","hashOfConfig":"30"},{"size":375,"mtime":1624076310741,"results":"31","hashOfConfig":"30"},{"size":2673,"mtime":1625260890073,"results":"32","hashOfConfig":"30"},{"size":4357,"mtime":1625261947736,"results":"33","hashOfConfig":"30"},{"size":7225,"mtime":1624076310739,"results":"34","hashOfConfig":"30"},{"size":17071,"mtime":1625261633633,"results":"35","hashOfConfig":"30"},{"size":17866,"mtime":1625120183111,"results":"36","hashOfConfig":"30"},{"size":238,"mtime":1624076310738,"results":"37","hashOfConfig":"30"},{"size":350,"mtime":1624076310738,"results":"38","hashOfConfig":"30"},{"size":407,"mtime":1624083443833,"results":"39","hashOfConfig":"30"},{"size":1777,"mtime":1625216138279,"results":"40","hashOfConfig":"30"},{"size":516,"mtime":1625258833190,"results":"41","hashOfConfig":"30"},{"size":166,"mtime":1624456360714,"results":"42","hashOfConfig":"30"},{"size":1090,"mtime":1625118950735,"results":"43","hashOfConfig":"30"},{"size":371,"mtime":1624467488953,"results":"44","hashOfConfig":"30"},{"size":317,"mtime":1624456000973,"results":"45","hashOfConfig":"30"},{"size":26133,"mtime":1625259152545,"results":"46","hashOfConfig":"30"},{"size":4280,"mtime":1624860445922,"results":"47","hashOfConfig":"30"},{"size":2983,"mtime":1625119423977,"results":"48","hashOfConfig":"30"},{"size":3629,"mtime":1625119163285,"results":"49","hashOfConfig":"30"},{"size":879,"mtime":1624640871434,"results":"50","hashOfConfig":"30"},{"size":1701,"mtime":1624623762691,"results":"51","hashOfConfig":"30"},{"size":9530,"mtime":1625261819090,"results":"52","hashOfConfig":"30"},{"size":1188,"mtime":1625118669115,"results":"53","hashOfConfig":"30"},{"size":3503,"mtime":1625119482662,"results":"54","hashOfConfig":"30"},{"size":1279,"mtime":1625118616116,"results":"55","hashOfConfig":"30"},{"size":606,"mtime":1625259365415,"results":"56","hashOfConfig":"30"},{"size":498,"mtime":1625261035331,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1v8q40h",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"61"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js",["126"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { useEffect } from 'react';\r\nimport { CookiesProvider } from 'react-cookie';\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n  <Provider store={store}>\r\n    \r\n    <App />\r\n  </Provider>\r\n  </CookiesProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["127","128"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js",["129","130","131"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js",["132"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js",["133","134"],"import React, { useEffect, useState } from 'react';\r\nimport { Button,  Table, Modal, Form, Input, Tabs, Steps, Checkbox, Select, Result, InputNumber, Image } from 'antd';\r\nimport parse from 'react-html-parser';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport donateEvensts from '../Api/donateEvensts';\r\nimport PayPal from \"../components/Paypal\";\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst columns = [\r\n    {\r\n      title: 'Tên ',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      render: text => <a href=\"#/\">{text}</a>,\r\n    },\r\n    {\r\n      title: 'Số điện thoại',\r\n      dataIndex: 'phone',\r\n      key: 'phone',\r\n    },\r\n    {\r\n      title: 'Số tiền ủng hộ',\r\n      dataIndex: 'coin',\r\n      key: 'coin',\r\n    },\r\n    {\r\n      title: 'Trạng thái',\r\n      key: 'status',\r\n      dataIndex: 'status',\r\n      \r\n    },\r\n  ];\r\n  \r\n  const data = [\r\n    {\r\n      key: '1',\r\n      name: 'Quách Trọng Nhân',\r\n      phone: '0849119919',\r\n      coin: '1.000 vnđ',\r\n      status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '2',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '2.000 vnđ',\r\n        status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '3',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '5.000 vnđ',\r\n        status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '4',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '10.000 vnđ',\r\n        status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '5',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '20.000 vnđ',\r\n        status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '6',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '50.000 vnđ',\r\n        status: \"Chưa chuyển \",\r\n    },\r\n    {\r\n        key: '7',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '100.000 vnđ',\r\n        status: \"Đã chuyển \",\r\n    },\r\n    {\r\n        key: '8',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '200.000 vnđ',\r\n        status: \"Chưa chuyển \",\r\n    },\r\n    {\r\n        key: '9',\r\n        name: 'Quách Trọng Nhân',\r\n        phone: '0849119919',\r\n        coin: '500.000 vnđ',\r\n        status: \"Chưa chuyển \",\r\n    },\r\n  ];\r\n\r\nconst Detail = () => {\r\n    let { _id } = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [img, setImg] = useState([]);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const showModal = () => {\r\n      setIsModalVisible(true);\r\n      setCurrent(0)\r\n    };\r\n    const handleOk = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n    useEffect(() => {\r\n        window.scrollTo(0,0)\r\n        const fetchData = async () => {\r\n            try {\r\n                await donateEvensts.get(_id).then((res) => {\r\n                    res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                    setDonate(res.data.DonateEnvent);\r\n                    console.log('ádas',res.data.DonateEnvent);\r\n                    setImg(res.data.DonateEnvent.hinhAnh)\r\n                    \r\n                });\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    console.log(Donate.noiDung);\r\n    \r\n    const phoneSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"84\">+84</Option>\r\n                <Option value=\"85\">+85</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n    //const [value, setValue] = useState(1);\r\n \r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        setChecked(e.target.checked);\r\n\r\n    }\r\n   \r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n    \r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    values['checked'] = checked;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                  \r\n\r\n                };\r\n                return (\r\n                    <>\r\n                        <Form\r\n\r\n                            {...layout}\r\n                            name=\"basic\"\r\n                            initialValues={{ prefix: \"84\", coin: \"10000\", id: `${_id}` }}\r\n                            onFinish={onFinish}\r\n                            onFinishFailed={onFinishFailed}\r\n                        >\r\n                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n                                <Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n                                <Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n                            </Radio.Group> */}\r\n                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                <Checkbox />\r\n\r\n                            </Form.Item>\r\n\r\n\r\n                            {checked === false ? (\r\n                                <>\r\n                                    <Form.Item\r\n                                        label=\"Họ và tên\"\r\n                                        name=\"name\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Họ và tên của bạn\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Số điện thoại\"\r\n                                        name=\"phone\"\r\n\r\n                                    >\r\n                                        <Input placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label=\"Số tiền ủng hộ\"\r\n                                        rules={[\r\n\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                            },\r\n                                        ]}\r\n                                        name=\"coin\">\r\n                                        <InputNumber\r\n                                            \r\n                                            style={{ width: \"200px\" }}\r\n                                            defaultValue={10000}\r\n                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"content\"\r\n                                        label=\"Lời nhắn\"\r\n                                    >\r\n                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                    </Form.Item>\r\n                                    <Form.Item hidden name=\"id\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item wrapperCol={{\r\n                                        xs: { span: 24, offset: 0 },\r\n                                        sm: { span: 16, offset: 8 },\r\n                                    }} >\r\n                                        <Button type=\"primary\"  htmlType=\"submit\">\r\n                                            Xác nhận\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Form.Item hidden name=\"andanh\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n\r\n                                        label=\"Số tiền ủng hộ\"\r\n                                        rules={[\r\n\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                            },\r\n                                        ]}\r\n                                        name=\"coin\">\r\n                                        <InputNumber\r\n                                           \r\n                                            style={{ width: \"200px\" }}\r\n                                            defaultValue={10000}\r\n                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label='Lời nhắn'\r\n                                        name=\"content\"\r\n                                    >\r\n                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                    </Form.Item>\r\n                                    <Form.Item hidden name=\"id\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Xác nhận\r\n                                        </Button>\r\n                                    </Form.Item>\r\n\r\n                                </>\r\n                            )}\r\n\r\n                        </Form>\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: 100.000đ</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>Cùng nhau chung tay đẩy lùi dịch bệnh</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n    const convertNumber = (x)=>{\r\n        return   x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n     let html= Donate.noiDung;\r\n      \r\n    //console.log(html);\r\n    return (\r\n        <>\r\n            <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.tieuDe}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"inherit\" }}> \r\n                                Số tiền cần quyên góp {Donate.soTienCanDonate}VNĐ </h3>\r\n                      \r\n                           \r\n                          \r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.tomTat}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                                <Tabs defaultActiveKey=\"1\"/*  onChange={callback} */>\r\n                                    <TabPane tab=\"Câu chuyện\" key=\"2\">\r\n                                        {parse(parse(html))}\r\n                            </TabPane>\r\n                                    <TabPane tab=\"Nhà hảo tâm\" key=\"3\">\r\n                                    <Table columns={columns} dataSource={data} />\r\n                            </TabPane>\r\n                                    <TabPane tab=\"Các quyên góp khác\" key=\"4\">\r\n                                        Content of Tab Pane 3\r\n                            </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <Tabs defaultActiveKey=\"1\" type=\"card\" /* size={size} */>\r\n                                    <TabPane tab=\"Chuyển khoản\" key=\"1\">\r\n                                        <Steps current={current}>\r\n                                            {steps.map(item => (\r\n                                                <Step key={item.title} title={item.title} />\r\n                                            ))}\r\n                                        </Steps>\r\n                                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                                        <div className=\"steps-action\">\r\n                                            {current < steps.length - 1 && (\r\n                                                <Button type=\"primary\" onClick={() => next()}>\r\n                                                    Tiếp theo\r\n                                                </Button>\r\n                                            )}\r\n                                            {current === steps.length - 1 && (\r\n                                                <Button type=\"primary\" onClick={showModal}>\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            )}\r\n                                            {current > 0 && (\r\n                                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                                    Trở lại\r\n                                                </Button>\r\n                                            )}\r\n                                        </div>\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Momo\" key=\"2\">\r\n                                        Content of card tab 2\r\n                                </TabPane>\r\n\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <Modal title=\"Cám ơn\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n      </Modal>                                   \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js",["135"],"import { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history }) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return (null);\r\n}\r\n\r\nexport default  withRouter(ScrollToTop);",["136","137"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js",["138"],"import React, { useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nconst Paypal = () => {\r\n    const paypal = useRef();\r\n    const getData = JSON.parse(localStorage.getItem(\"data\"))\r\n   const vndToUsd =(getData.coin/23000).toFixed(2);\r\n\r\n    console.log(vndToUsd);\r\n    useEffect(() => {\r\n        window.paypal\r\n            .Buttons({\r\n                createOrder: (data, actions, err) => {\r\n                    return actions.order.create({\r\n                        intent: \"CAPTURE\",\r\n                        purchase_units: [\r\n                            {\r\n                                description: `${getData.id}`,\r\n                                amount: {\r\n                                    currency_code: \"USD\",\r\n                                    value: `${vndToUsd}`,\r\n                                },\r\n                            },\r\n                        ],\r\n                    });\r\n                },\r\n                onApprove: async (data, actions) => {\r\n                    const order = await actions.order.capture();\r\n                    console.log(order.status);\r\n                    const url='http://localhost:4000/donate';\r\n                    if(order.status ===\"COMPLETED\"){\r\n                        console.log(\"abc\");\r\n                        axios.post(url,{\r\n                            data: getData\r\n                        })\r\n                    }\r\n                    \r\n\r\n\r\n                },\r\n                onError: (err) => {\r\n                    console.log(err);\r\n                },\r\n            })\r\n            .render(paypal.current);\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div ref={paypal}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paypal;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js",["139","140","141","142"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js",["143"],"import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n  } from \"../actions/type\";\r\n\r\n  const user =  JSON.parse(localStorage.getItem(\"user\"));\r\n \r\n  const initialState =user\r\n    ? { isLoggedIn: true, user }\r\n    : { isLoggedIn: false, user: null };\r\n  \r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case REGISTER_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case REGISTER_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case LOGIN_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: true,\r\n          user: payload.user,\r\n        };\r\n      case LOGIN_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      case LOGOUT:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js",["144"],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/type\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js",["145","146","147","148","149"],"import \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport React, {  useState } from 'react';\r\nimport { Card, Progress, Typography, Modal, Form, Input, Button, Steps, message, Checkbox, Select, Result, InputNumber } from 'antd';\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport PayPal from \"../components/Paypal\"\r\nimport {  useSelector } from \"react-redux\";\r\n//import { logout } from \"../redux/actions/auth.js\";\r\n\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst phoneSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n            <Option value=\"84\">+84</Option>\r\n            <Option value=\"85\">+85</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\nconst HotListDonate = (props) => {\r\n    const [donator, setDonator] = useState(null)\r\n    const [id, setid] = useState('');\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [licked, /* setLicked */] = React.useState(false);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const data = useSelector(state => state.login.user);\r\n\r\n    console.log(data);\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n        console.log('Content: ', e.currentTarget.dataset.id);\r\n        let id = e.currentTarget.dataset.id\r\n        let filterProduct = [];\r\n\r\n        filterProduct = props.listDonates.filter(\r\n            listDonates => listDonates._id === id\r\n        )\r\n        //setid(filterProduct[0]._id)\r\n        setid(filterProduct[0]._id);\r\n        setDonator(filterProduct)\r\n\r\n\r\n\r\n\r\n    };\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        setCurrent(0)\r\n        window.location.reload();\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        window.location.reload();\r\n    };\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        onChange(setChecked(e.target.checked))\r\n\r\n\r\n    }\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    values['checked'] = checked;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", coin: \"10000\", id: `${id}` }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n    <Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n    <Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n\r\n                                    </Form.Item>\r\n\r\n\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"name\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                            >\r\n                                                <Input placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n\r\n                                            >\r\n                                                <Input placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"coin\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"content\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"coin\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"content\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", coin: \"10000\", id: `${id}`,name:`${data.username}`, phone:\"0849119919\" }}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n<Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n<Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"name\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input placeholder=\"Họ và tên của bạn\" />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n\r\n                                                    >\r\n                                                        <Input placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"coin\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"content\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"coin\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.coin)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.content}</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {props.listDonates.map((item) => {\r\n                if (item.tinNoiBat === true) {\r\n                    return (\r\n                        <>\r\n                            <div key='1' className=\"col-6 card\">\r\n                                <Card\r\n                                    key='1'\r\n                                    hoverable\r\n                                    style={{ borderRadius: 10, height: 260, width: \"100%\" }}\r\n                                    cover={<img height=\"100%\" alt=\"example\" src={item.hinhAnh[0]} />}\r\n                                >\r\n                                    <p style={{ display: \"none\" }} data-id={item._id}></p>\r\n                                    <div className=\"detail\">\r\n                                        <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n                                            <Text style={ellipsis ? { width: 200 } : undefined, { fontWeight: \"500\", fontSize: \"18px\", color: \"#1890ff\" }}\r\n                                                ellipsis={ellipsis ? { tooltip: `${item.tieuDe}` } : false} >\r\n                                                {item.tieuDe} </Text>\r\n                                        </Link>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n\r\n                                                    {convertNumber(item.soTienDonateHieTai)\r\n                                                    } VNĐ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)}%</p>\r\n                                            </div>\r\n                                            <Progress percent={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)} showInfo={false} status=\"active\" />\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">ngày còn lại</p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <p className=\"ant-btn ant-btn-primary \" data-id={item._id} onClick={showModal}>Ủng hộ ngay</p>\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n                        </>)\r\n                }\r\n            })\r\n            }\r\n            {donator != null ? (\r\n                <>\r\n\r\n                    <Modal title={donator[0].tieuDe} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <>\r\n                                    {licked === false ? (<> <Button type=\"primary\" onClick={() => next()}>\r\n                                        Tiếp theo ffd\r\n                                    </Button></>) : (\r\n                                        <>\r\n                                            <Button type=\"primary\" onClick={() => next()}>\r\n                                                Tiếp theo\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n\r\n                                </>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Modal title={\"ủng hộ\"} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={onChange, () => next()}>\r\n                                    Tiếp theo\r\n                                </Button>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nexport default HotListDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js",["150","151"],"import React from 'react';\r\nimport { Card, Progress, Typography, Badge, } from 'antd';\r\nimport {  UsergroupAddOutlined } from '@ant-design/icons';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nconst ListDonate = (props) => {\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    return (\r\n        <>\r\n            {props.listDonate.map((item) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"col-4 \" >\r\n                            <Badge count={item.tenLoai}>\r\n                                <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n\r\n                                    <Card className=\"margin-top\"\r\n                                        style={{ borderRadius: 10, height: 460 }}\r\n                                        hoverable\r\n                                        cover={<img alt=\"example\" src={item.hinhAnh[0]} />}>\r\n                                        <Text style={ellipsis ? { width: 250 } : undefined, { fontWeight: \"500\", fontSize: \"18px\" }}\r\n                                            ellipsis={ellipsis ? { tooltip: 'Xem chi tiết !' } : false} >\r\n                                            {item.tieuDe} </Text>\r\n                                        <Text\r\n                                            style={ellipsis ? { width: 250 } : undefined,{fontFamily: \"cursive\"}}\r\n                                            ellipsis={ellipsis ? { tooltip: 'Xem chi tiết !' } : false} >\r\n                                            {item.tomTat}\r\n                                        </Text>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    {convertNumber(item.soTienDonateHieTai)} vnđ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">\r\n\r\n                                                    {Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (\r\n                                                        <p>Hoàn thành</p>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <p>\r\n                                                                {Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)}%\r\n                                                            </p>\r\n\r\n                                                        </>\r\n\r\n                                                    )}\r\n\r\n                                                </p>\r\n                                            </div>\r\n\r\n                                            <Progress percent={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)} showInfo={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (true) : (false)} status={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">ngày còn lại</p>\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                    </Card>\r\n\r\n                                </Link>\r\n                            </Badge>\r\n                        </div>\r\n                    </>\r\n                )\r\n\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Login.js",["152"],"import React,{useState} from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect,useHistory } from 'react-router-dom';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport  {login} from \"../redux/actions/auth.js\";\r\n\r\n\r\n\r\nconst Login = () => {\r\n\r\n    //const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { isLoggedIn } = useSelector(state => state.auth);\r\n    //const  message  = useSelector(state => state.auth.user);\r\n    const history = useHistory();\r\n\r\n    const onFinish = (values) => {\r\n       \r\n        //setLoading(true);\r\n        dispatch(login(values))\r\n        .then(() => {\r\n          history.push(\"/\");\r\n          //window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          //setLoading(false);\r\n          console.log(\"Loi đăng nhập\");\r\n        });\r\n        \r\n\r\n        console.log('Received values of form: ', values.username);\r\n    };\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />;\r\n      }\r\n    return (\r\n        <>\r\n            <Row className='login-container'>\r\n                <Col className=\"login-form-wrapper\" offset={6} span={10}>\r\n                    <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 16 }}\r\n                        name=\"normal_login\"\r\n                        className=\"login-form\"\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[{ required: true, message: 'Please input your Username!' }]}\r\n                        >\r\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[{ required: true, message: 'Please input your Password!' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n\r\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                Log in\r\n                            </Button>\r\n                            Or <a href=\"#/\">register now!</a>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js",["153"],"import axios from \"axios\";\r\n\r\n\r\nconst API_URL = \"http://localhost:4000/admin/\";\r\n\r\nconst register = (username, email, password) => {\r\n  return axios.post(API_URL + \"signup\", {\r\n    username,\r\n    email,\r\n    password,\r\n  });\r\n};\r\n\r\nconst login = (values) => {\r\n  \r\n  return axios\r\n    .post(API_URL + \"login\", values, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      withCredentials: true\r\n     \r\n    })\r\n    .then((response) => {\r\n      if (response.data.status) {\r\n        \r\n        localStorage.setItem(\"user\", JSON.stringify(response.data.data.user));\r\n        //Cookies.set('userKaca', response.data.data, {path: '/', maxAge: 30000, httpOnly: true });\r\n\r\n      }\r\n\r\n      return response.data.data.user;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n};\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js",["154","155","156","157","158","159"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js",[],{"ruleId":"160","severity":1,"message":"161","line":8,"column":10,"nodeType":"162","messageId":"163","endLine":8,"endColumn":19},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"160","severity":1,"message":"168","line":18,"column":10,"nodeType":"162","messageId":"163","endLine":18,"endColumn":15},{"ruleId":"160","severity":1,"message":"169","line":28,"column":10,"nodeType":"162","messageId":"163","endLine":28,"endColumn":20},{"ruleId":"170","severity":1,"message":"171","line":53,"column":6,"nodeType":"172","endLine":53,"endColumn":8,"suggestions":"173"},{"ruleId":"160","severity":1,"message":"174","line":2,"column":26,"nodeType":"162","messageId":"163","endLine":2,"endColumn":32},{"ruleId":"170","severity":1,"message":"175","line":141,"column":8,"nodeType":"172","endLine":141,"endColumn":10,"suggestions":"176"},{"ruleId":"160","severity":1,"message":"177","line":339,"column":11,"nodeType":"162","messageId":"163","endLine":339,"endColumn":24},{"ruleId":"170","severity":1,"message":"178","line":12,"column":6,"nodeType":"172","endLine":12,"endColumn":8,"suggestions":"179"},{"ruleId":"164","replacedBy":"180"},{"ruleId":"166","replacedBy":"181"},{"ruleId":"170","severity":1,"message":"182","line":45,"column":8,"nodeType":"172","endLine":45,"endColumn":10,"suggestions":"183"},{"ruleId":"160","severity":1,"message":"184","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":21},{"ruleId":"160","severity":1,"message":"185","line":1,"column":23,"nodeType":"162","messageId":"163","endLine":1,"endColumn":38},{"ruleId":"160","severity":1,"message":"186","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":29},{"ruleId":"160","severity":1,"message":"187","line":8,"column":7,"nodeType":"162","messageId":"163","endLine":8,"endColumn":17},{"ruleId":"188","severity":1,"message":"189","line":15,"column":3,"nodeType":"190","endLine":50,"endColumn":4},{"ruleId":"188","severity":1,"message":"189","line":5,"column":1,"nodeType":"190","endLine":18,"endColumn":2},{"ruleId":"191","severity":1,"message":"192","line":395,"column":43,"nodeType":"193","messageId":"194","endLine":395,"endColumn":45},{"ruleId":"195","severity":1,"message":"196","line":409,"column":95,"nodeType":"197","messageId":"198","endLine":409,"endColumn":96},{"ruleId":"195","severity":1,"message":"196","line":464,"column":77,"nodeType":"197","messageId":"198","endLine":464,"endColumn":78},{"ruleId":"195","severity":1,"message":"196","line":488,"column":73,"nodeType":"197","messageId":"198","endLine":488,"endColumn":74},{"ruleId":"195","severity":1,"message":"196","line":493,"column":77,"nodeType":"197","messageId":"198","endLine":493,"endColumn":78},{"ruleId":"195","severity":1,"message":"196","line":27,"column":91,"nodeType":"197","messageId":"198","endLine":27,"endColumn":92},{"ruleId":"195","severity":1,"message":"196","line":31,"column":89,"nodeType":"197","messageId":"198","endLine":31,"endColumn":90},{"ruleId":"160","severity":1,"message":"199","line":1,"column":15,"nodeType":"162","messageId":"163","endLine":1,"endColumn":23},{"ruleId":"188","severity":1,"message":"200","line":40,"column":1,"nodeType":"190","endLine":44,"endColumn":3},{"ruleId":"160","severity":1,"message":"201","line":59,"column":11,"nodeType":"162","messageId":"163","endLine":59,"endColumn":19},{"ruleId":"202","severity":1,"message":"203","line":60,"column":9,"nodeType":"204","endLine":60,"endColumn":40},{"ruleId":"160","severity":1,"message":"205","line":62,"column":11,"nodeType":"162","messageId":"163","endLine":62,"endColumn":18},{"ruleId":"202","severity":1,"message":"203","line":63,"column":9,"nodeType":"204","endLine":63,"endColumn":39},{"ruleId":"160","severity":1,"message":"206","line":65,"column":11,"nodeType":"162","messageId":"163","endLine":65,"endColumn":17},{"ruleId":"202","severity":1,"message":"203","line":66,"column":9,"nodeType":"204","endLine":66,"endColumn":38},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["207"],"no-negated-in-lhs",["208"],"'login' is defined but never used.","'isSignedIn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'Button' is defined but never used.","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.",["210"],"'convertNumber' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["211"],["207"],["208"],"React Hook useEffect has missing dependencies: 'getData' and 'vndToUsd'. Either include them or remove the dependency array.",["212"],"'createStore' is defined but never used.","'applyMiddleware' is defined but never used.","'composeWithDevTools' is defined but never used.","'middleware' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useState' is defined but never used.","Assign object to a variable before exporting as module default","'Facebook' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Twitter' is assigned a value but never used.","'Google' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},"Update the dependencies array to be: [dispatch]",{"range":"221","text":"222"},"Update the dependencies array to be: [_id]",{"range":"223","text":"224"},"Update the dependencies array to be: [history]",{"range":"225","text":"226"},"Update the dependencies array to be: [getData, vndToUsd]",{"range":"227","text":"228"},[1989,1991],"[dispatch]",[3774,3776],"[_id]",[279,281],"[history]",[1608,1610],"[getData, vndToUsd]"]