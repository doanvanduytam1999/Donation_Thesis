[{"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js":"1","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js":"2","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js":"3","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js":"4","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js":"5","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js":"6","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js":"7","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js":"8","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AllDonate.js":"9","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Contact.js":"10","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js":"11","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\ListDonator.js":"12","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js":"13","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js":"14","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AboutUs.js":"15","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js":"16","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\MailPost.js":"17","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Join.js":"18","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js":"19","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js":"20","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js":"21","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js":"22","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListALl.js":"23","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js":"24","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js":"25","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js":"26","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js":"27","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js":"28","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\EditProfile.js":"29","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ProfileUser.js":"30","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js":"31","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Momo.js":"32"},{"size":777,"mtime":1626765232133,"results":"33","hashOfConfig":"34"},{"size":375,"mtime":1624076310741,"results":"35","hashOfConfig":"34"},{"size":524,"mtime":1626764469249,"results":"36","hashOfConfig":"34"},{"size":4160,"mtime":1649819141030,"results":"37","hashOfConfig":"34"},{"size":3900,"mtime":1629619564044,"results":"38","hashOfConfig":"34"},{"size":1148,"mtime":1627020599091,"results":"39","hashOfConfig":"34"},{"size":606,"mtime":1625259365415,"results":"40","hashOfConfig":"34"},{"size":950,"mtime":1649820600550,"results":"41","hashOfConfig":"34"},{"size":6429,"mtime":1629714392596,"results":"42","hashOfConfig":"34"},{"size":4502,"mtime":1629771951003,"results":"43","hashOfConfig":"34"},{"size":3498,"mtime":1629853365689,"results":"44","hashOfConfig":"34"},{"size":6120,"mtime":1629714306259,"results":"45","hashOfConfig":"34"},{"size":65364,"mtime":1645416163203,"results":"46","hashOfConfig":"34"},{"size":15571,"mtime":1629714227255,"results":"47","hashOfConfig":"34"},{"size":7433,"mtime":1629714122188,"results":"48","hashOfConfig":"34"},{"size":5907,"mtime":1629602427327,"results":"49","hashOfConfig":"34"},{"size":5202,"mtime":1629772194793,"results":"50","hashOfConfig":"34"},{"size":5182,"mtime":1629772074827,"results":"51","hashOfConfig":"34"},{"size":3629,"mtime":1625119163285,"results":"52","hashOfConfig":"34"},{"size":1901,"mtime":1627061517910,"results":"53","hashOfConfig":"34"},{"size":323,"mtime":1649822060136,"results":"54","hashOfConfig":"34"},{"size":1305,"mtime":1628959744101,"results":"55","hashOfConfig":"34"},{"size":6210,"mtime":1636447745098,"results":"56","hashOfConfig":"34"},{"size":3240,"mtime":1629820095730,"results":"57","hashOfConfig":"34"},{"size":30259,"mtime":1629818654626,"results":"58","hashOfConfig":"34"},{"size":317,"mtime":1624456000973,"results":"59","hashOfConfig":"34"},{"size":6026,"mtime":1629352317155,"results":"60","hashOfConfig":"34"},{"size":12329,"mtime":1629574884058,"results":"61","hashOfConfig":"34"},{"size":7948,"mtime":1629522935984,"results":"62","hashOfConfig":"34"},{"size":3271,"mtime":1629602310070,"results":"63","hashOfConfig":"34"},{"size":1908,"mtime":1629818382272,"results":"64","hashOfConfig":"34"},{"size":1141,"mtime":1629852856465,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cy7jm9",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js",["140","141"],"import { unwrapResult } from '@reduxjs/toolkit';\r\nimport 'antd/dist/antd.css';\r\n//import ScrollToTop from \"react-scroll-to-top\";\r\nimport firebase from 'firebase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport UserApi from './Api/UserApi';\r\nimport './App.css';\r\nimport Footer from './components/Footer';\r\nimport Header from './components/Header';\r\nimport AboutUs from './pages/AboutUs';\r\nimport AllDonate from './pages/AllDonate';\r\nimport Contact from './pages/Contact';\r\nimport Detail from './pages/Detail';\r\nimport Home from './pages/Home';\r\nimport Join from './pages/Join';\r\nimport ListDonator from './pages/ListDonator';\r\nimport MailPost from './pages/MailPost';\r\nimport Profile from './pages/Profile';\r\n//import Login from './pages/Login';\r\nimport Resgister from './pages/Resgister';\r\nimport { getMe } from './redux/reducer/UserSlice';\r\n// Configure Firebase.\r\nconst config = {  \r\n  apiKey: 'AIzaSyDFlce1nx_WeDvvyQFoQY_VnLVXQMOdk7o',\r\n  authDomain: 'donate-d9fdf.firebaseapp.com',\r\n  // ...\r\n};\r\nfirebase.initializeApp(config);\r\nfunction App() {\r\n  \r\n  const [/* isSignedIn */, setIsSignedIn] = useState(false); // Local signed-in state.\r\n  const { isLoggedIn } = useSelector(state => state.login);\r\n  const dispatch = useDispatch();\r\n  // Listen to the Firebase Auth state and set the local state.\r\n  useEffect(() => {\r\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async (user) => {\r\n      setIsSignedIn(!!user);\r\n      if (!user) {\r\n        console.log(\"Chưa đăng nhập\");\r\n        return\r\n      }\r\n      else{\r\n        try {\r\n          const actionResult = await dispatch(getMe());\r\n          const currentUser = await unwrapResult(actionResult);\r\n          UserApi.postLoginGoogle(currentUser).then((res)=>{\r\n            if(res.data.status ===\"success\"){\r\n               let user=  res.data.data.user;\r\n               localStorage.setItem(\"user\", JSON.stringify(user));\r\n               dispatch({\r\n                type: \"LOGIN_SUCCESS\",\r\n                payload: { user: user },\r\n              });\r\n               console.log(user);\r\n             \r\n\r\n              //window.location.reload();\r\n            }\r\n          })\r\n          \r\n          \r\n          console.log('Logged in user: ', currentUser);\r\n         //window.location.reload()\r\n  \r\n        } catch (error) {\r\n          console.log('Failed to login ', error.message);\r\n          // show toast error\r\n        }\r\n      }\r\n      console.log(\"Đã đăng nhập\", user);\r\n     \r\n    });\r\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\r\n\r\n  }, []);\r\n  \r\n/*   if (isLoggedIn) {\r\n    <Redirect to=\"/\" />\r\n\r\n  } */\r\n  return (\r\n\r\n    <Router>\r\n     \r\n        <Header />\r\n        <Route onUpdate={() => window.scrollTo(0, 0)} exact path=\"/\">\r\n          <Home onUpdate={() => window.scrollTo(0, 0)} />\r\n\r\n        </Route>\r\n        <Route exact path=\"/lien-he\">\r\n          <Contact />\r\n\r\n        </Route>\r\n        <Route exact path=\"/gioi-thieu\">\r\n          <AboutUs />\r\n\r\n        </Route>\r\n        <Route exact path=\"/tham-gia\">\r\n          <Join />\r\n        </Route>\r\n        <Route exact path=\"/hoan-canh-kho-khan\">\r\n          <MailPost />\r\n        </Route>\r\n        <Route onUpdate={() => window.scrollTo(0, 0)} exact path=\"/tat-ca-chuong-trinh\">\r\n          <AllDonate />\r\n\r\n        </Route>\r\n        <Switch>\r\n          <Route exact path=\"/thong-tin-chi-tiet/:_id\">\r\n            <Detail />\r\n          </Route>\r\n          <Route exact path=\"/xem-tat-ca-nguoi-ung-ho/:_id\">\r\n            <ListDonator />\r\n          </Route>\r\n          \r\n          <Route exact path=\"/thong-tin-tai-khoan\">\r\n            <Profile />\r\n          </Route>\r\n          {/* <Route exact path=\"/dang-nhap\">\r\n            <Login />\r\n          </Route> */}\r\n          <Route exact path=\"/dang-ki\">\r\n            <Resgister />\r\n          </Route>\r\n        </Switch>\r\n        <Footer  onUpdate={() => window.scrollTo(0, 0)} />\r\n    \r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js",["142","143","144","145"],"import { FacebookOutlined, InstagramOutlined, TwitterOutlined, YoutubeOutlined } from '@ant-design/icons';\r\nimport { Divider } from 'antd';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Footer.scss\";\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n\r\n            <div className=\"footer\">\r\n                <Divider />\r\n                <div className=\"container\">\r\n                    <div className=\"footer_text col-10 offset-1 \">\r\n                        <div className=\"row\">\r\n                            <div className=\"footer_text-head\">\r\n                                <div className=\"img \">\r\n                                    <img width=\"40px\" src=\"../images/logo.png\" alt=\"logo\" />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <Divider />\r\n                        <div className=\"wapper_menu\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-3\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"menu_item-text\">\r\n                                            <ul>\r\n                                                <li>\r\n                                                    <p className=\"text-bold\">About Us</p>\r\n                                                </li>\r\n                                                <li>\r\n                                                    <Link to=\"gioi-thieu\" > <span className=\"btn-text\">About Us</span></Link>\r\n\r\n                                                </li>\r\n                                             {/*    <li>\r\n                                                    <a href=\"#/\">Terms & Conditions</a>\r\n                                                </li>\r\n                                                <li>\r\n                                                    <a href=\"#/\">Privacy Policy</a>\r\n                                                </li> */}\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-3\">\r\n\r\n                                </div>\r\n                                <div className=\"col-3\">\r\n\r\n                                </div>\r\n                                <div className=\"col-3\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"menu_item-text\">\r\n                                            <ul>\r\n                                                <li>\r\n                                                    <p className=\"text-bold\">Help</p>\r\n                                                </li>\r\n\r\n                                                <li>\r\n                                                    <Link to=\"/lien-he\">Contact Us</Link>\r\n\r\n                                                </li>\r\n\r\n                                            </ul>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer_end\">\r\n                    <div className=\"container\">\r\n                        <div className=\"footer_end_text col-10 offset-1 \">\r\n                            <p style={{textAlign:\"center\"}}> Copyright © Đoàn Văn Duy Tâm & Quách Trọng Nhân</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AllDonate.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Contact.js",["146"],"\r\nimport React, { useState /* useEffect */,createRef } from 'react';\r\nimport { Card, Form, Input, Button,message } from 'antd';\r\nimport { init, sendForm } from 'emailjs-com';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Contact.scss\"\r\nimport { PhoneOutlined, HomeOutlined, SendOutlined } from '@ant-design/icons';\r\ninit('user_34PJkVJOxKj7nBHxWBCKl');\r\nconst Contact = () => {\r\n    const [/* contactNumber */, setContactNumber] = useState(\"000000\");\r\n    const [form] = Form.useForm();\r\n    const generateContactNumber = () => {\r\n        const numStr = \"000000\" + (Math.random() * 1000000 | 0);\r\n        setContactNumber(numStr.substring(numStr.length - 6));\r\n    }\r\n    const onFinish = () => {\r\n        message.loading(\"Đang gửi gmail...\")\r\n     \r\n        generateContactNumber();\r\n        sendForm('service_p1w3ye5', 'template_12aifjc', '#basic')\r\n        .then(function(response) {\r\n            if(response.status ===200){\r\n               \r\n                message.success(\"Gửi gmail thành công!\")\r\n                \r\n                form.resetFields();\r\n               \r\n            }\r\n          \r\n        }, function(error) {\r\n          console.log('FAILED...', error);\r\n          message.error(\"Gửi gmail không  thành công:\",error)\r\n        });\r\n    };\r\n   //let day =\"2018-04-04\"\r\n    return (\r\n\r\n        <>\r\n            <div className=\"container\">\r\n                <Card style={{ marginTop: \"90px\" }} bordered={true}>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 offset-1\">\r\n                            <div className=\" contact_form\">\r\n                                <h3 className=\"title\">Liên lạc</h3>\r\n                                <Form\r\n                                    style={{ width: \"450px\" }}\r\n                                    name=\"basic\"\r\n                                    id=\"basic\"\r\n                                    form={form} \r\n                                    onFinish={onFinish}  >\r\n                                    <Form.Item\r\n                                        name=\"user_name\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập tên!' }]}\r\n                                    >\r\n                                        <Input   name=\"user_name\" placeholder='Họ tên' />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"user_email\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập gmail!' }]}\r\n                                    >\r\n                                        <Input  name=\"user_email\" placeholder=\"Gmail\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"message\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập nội dung!' }]}\r\n                                    >\r\n                                        <Input.TextArea  name=\"message\" rows={5} placeholder=\"Nội dung\" />\r\n                                    </Form.Item>\r\n                                  \r\n                                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Gửi gmail\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"col-4 \">\r\n                            <h3 className=\"title\">Địa chỉ</h3>\r\n                            <div className=\"contact\">\r\n                                <div>\r\n                                    <p><HomeOutlined /> <span className=\"text-bold\">Địa chỉ: </span>80 Cao Lỗ ,quận 8,TP.HCM </p>\r\n                                    <p><PhoneOutlined /><span className=\"text-bold\"> Điện thoại: </span>0849119919</p>\r\n                                    <p><SendOutlined /> <span className=\"text-bold\">Email: </span>quyengop@gmail.com</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n                </Card>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Contact;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\ListDonator.js",["147"],"import React, { useEffect, useState } from 'react';\r\nimport { Table,  Image} from 'antd';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport donateEvensts from '../Api/donateEvensts';\r\n//import { useSelector } from \"react-redux\";\r\n\r\n\r\n\r\nconst ListDonator = () => {\r\n    let { _id } = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [/* DonateID */, setDonateID] = useState([]);\r\n    //const { isLoggedIn } = useSelector(state => state.login);\r\n    const [img, setImg] = useState([]);\r\n\r\n    const [licked, /* setLicked */] = React.useState(false);\r\n\r\n    const [AllDonator, setAllDonator] = useState([]);\r\n    const [/* AllDonates */, setAllDonates] = useState([]);\r\n   \r\n    const [ReleatedPost, setReleatedPost] = useState([]);\r\n    const [/* loading */, setloading] = useState(false);\r\n    //const data = useSelector(state => state.login.user);\r\n    const idCategoryPost = Donate.categoryPost\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        const fetchData = async () => {\r\n            try {\r\n                await donateEvensts.get(_id).then((res) => {\r\n                    setDonateID(res.data.DonateEnvent)\r\n                    //res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                    setDonate(res.data.DonateEnvent);\r\n                    //console.log('ádas',res.data.DonateEnvent);\r\n                    setImg(res.data.DonateEnvent.image)\r\n\r\n                });\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    setAllDonates(res.data.DonateEnvents);\r\n\r\n                });\r\n\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n        const fetchAllDonater = async () => {\r\n            try {\r\n                await donateEvensts.getAllDonater(_id).then((res) => {\r\n                    if (res.data.status === \"success\") {\r\n                       \r\n                        setAllDonator(res.data.AllDonater)\r\n                    }\r\n\r\n                })\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch AllDonator data at: \", error);\r\n            }\r\n        }\r\n\r\n        fetchdonatesData();\r\n        fetchData();\r\n        fetchAllDonater();\r\n        //radomDonateEvent()\r\n    }, [licked,_id]);\r\n    console.log(idCategoryPost);\r\n    console.log(Donate);\r\n    useEffect(() => {\r\n\r\n        window.scrollTo(0, 0)\r\n        const fetchCategoryPost = async () => {\r\n            try {\r\n                await donateEvensts.getPostCategory(_id).then((res) => {\r\n                    setReleatedPost(res.data.ReleatedPost)\r\n                });\r\n                setloading(true)\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        fetchCategoryPost();\r\n    }, [idCategoryPost]);\r\n\r\n    console.log(ReleatedPost);\r\n  \r\n    \r\n    const convertNumber = (x) => {\r\n        if (Donate === []) {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n        else {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n\r\n    }\r\n   \r\n    const columns = [\r\n        {\r\n            title: 'Tên ',\r\n            dataIndex: 'fullName',\r\n            key: 'fullName',\r\n\r\n        },\r\n        {\r\n            title: 'Số tiền ủng hộ (VNĐ)',\r\n            dataIndex: 'amountToDonate',\r\n            key: 'amountToDonate',\r\n            render: text => (\r\n                <>\r\n                    {convertNumber(text)} đ\r\n                </>\r\n            ),\r\n        }\r\n    ];\r\n   \r\n    return (\r\n        <>\r\n         <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.title}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"NunitoBold\" }}>\r\n                                Số tiền cần quyên góp {convertNumber(Donate.setAmount)}VNĐ </h3>\r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.summary}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                            <Table columns={columns} dataSource={AllDonator} />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </section>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListDonator;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js",["148","149"],"import { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Badge, Button, Card, Checkbox, Divider, Form, Image, Input, /* InputNumber, message, */ Modal, Progress, Result, Select,/*  Spin, */ Steps, Table, Tabs, Typography } from 'antd';\r\n//import axios from \"axios\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport parse from 'react-html-parser';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link, useHistory, useParams,useLocation } from \"react-router-dom\";\r\nimport ScrollToTop from 'react-scroll-to-top';\r\nimport donateEvensts from '../Api/donateEvensts';\r\nimport PayPal from \"../components/Paypal\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport \"../style/Momo.scss\";\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst Detail = () => {\r\n    let {_id} = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [DonateID, setDonateID] = useState([]);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const [img, setImg] = useState([]);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [licked, setLicked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [AllDonator, setAllDonator] = useState([]);\r\n    const [/* AllDonates */, setAllDonates] = useState([]);\r\n    const [load, setLoad]=useState(false);\r\n    //const [ArrayDonateCategory, setArrayDonateCategory] = useState([]);\r\n    const [ReleatedPost, setReleatedPost] = useState([]);\r\n    const data = useSelector(state => state.login.user);\r\n    const user= JSON.parse(localStorage.getItem(\"user\"))\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const history = useHistory()\r\n    const idCategoryPost = Donate.categoryPost;\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n        setCurrent(0)\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n   \r\n    useEffect(() => {\r\n\r\n        window.scrollTo(0, 0)\r\n        const fetchData =  () => {\r\n            try {\r\n               \r\n                    donateEvensts.get(_id).then((res) => {\r\n                        setDonateID(res.data.DonateEnvent)\r\n                        console.log(res.data.DonateEnvent);\r\n                        //res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                        setDonate(res.data.DonateEnvent);\r\n                        //console.log('ádas',res.data.DonateEnvent);\r\n                        setImg(res.data.DonateEnvent.image)\r\n    \r\n                    });\r\n              \r\n                setTimeout(()=>{\r\n                    donateEvensts.get(_id).then((res) => {\r\n                        setDonateID(res.data.DonateEnvent)\r\n                        console.log(res.data.DonateEnvent);\r\n                        //res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                        setDonate(res.data.DonateEnvent);\r\n                        //console.log('ádas',res.data.DonateEnvent);\r\n                        setImg(res.data.DonateEnvent.image)\r\n    \r\n                    });\r\n                },3000)\r\n                \r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    setAllDonates(res.data.DonateEnvents);\r\n\r\n                });\r\n\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n        const fetchAllDonater = async () => {\r\n            try {\r\n                await donateEvensts.get50Donater(_id).then((res) => {\r\n                    if (res.data.status === \"success\") {\r\n                        /* res.data.AllDonater.soTienDonate = res.data.AllDonater.soTienDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\"); */\r\n                        setAllDonator(res.data.AllDonater)\r\n                    }\r\n\r\n                })\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch AllDonator data at: \", error);\r\n            }\r\n        }\r\n\r\n        fetchdonatesData();\r\n        fetchData();\r\n        fetchAllDonater();\r\n        //radomDonateEvent()\r\n    }, [licked, _id]);\r\n    //console.log(ReleatedPost);\r\n\r\n    let componentMounted = true;\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        const fetchCategoryPost =  () => {\r\n            setLoad(true);\r\n                 donateEvensts.getPostCategory(_id).then(async (res) => {\r\n                if(componentMounted){\r\n                    setReleatedPost(await res.data.ReleatedPost);\r\n                    setLoad(false);\r\n                }\r\n                return()=> {\r\n                    componentMounted = false\r\n                }\r\n                   \r\n                });\r\n                \r\n            \r\n        };\r\n        fetchCategoryPost();\r\n    }, [idCategoryPost]);\r\n    const Location = useLocation();\r\n    //console.log(Location.search);\r\n    //let str =Location.search;\r\n   //str= str.split('&');\r\n    //console.log(str);\r\n    const phoneSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"84\">+84</Option>\r\n                <Option value=\"85\">+85</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n    const checkBtn = () => {\r\n        setLicked(true)\r\n    }\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        setChecked(e.target.checked);\r\n    }\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n        setLicked(false)\r\n    };\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    /* if(Number(values.amountToDonate) <10000){\r\n                        message.error(\"Số tiền phải lớn hơn bằng 10.000Đ\");\r\n                        setLicked(false)\r\n                        return\r\n                    }\r\n                    else{ */\r\n                        checkBtn();\r\n                        values['checked'] = checked;\r\n                        values['donateEvent'] =_id;\r\n                        const data = JSON.stringify(values)\r\n                        localStorage.setItem(\"data\", data);\r\n                   /* }  */\r\n                   \r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\", phone:\"\" }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                                rules={[{ min: 10,max:11, message: 'Số điện thoại từ 10-11 số !' },\r\n                                                {\r\n                                                    pattern: new RegExp(/^\\+?(\\d.*){10,11}$/),\r\n                                                    message: \"Vui lòng nhập đúng số điện thoại !\",\r\n                                                },\r\n                                            ]}\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ \"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                    {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                    \r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                    {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", name: `${data.fullName}`, phone: \"\" }}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                           \r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"name\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n                                                        rules={[{ min: 10,max:11, message: 'Số điện thoại từ 10-11 số !' }, {\r\n                                                            pattern: new RegExp(/^\\+?(\\d.*){10,11}$/),\r\n                                                            message: \"Vui lòng nhập đúng số điện thoại !\",\r\n                                                        },]}\r\n                                                    >\r\n                                                        <Input style={{ width: '100%' }}  />\r\n                                                    </Form.Item>\r\n                                                        \r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ \"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                           \r\n                                                            {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                            {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                          \r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.amountToDonate)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.content}</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n    const convertNumber = (x) => {\r\n        if (Donate === []) {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n        else {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n\r\n    }\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Tên ',\r\n            dataIndex: 'fullName',\r\n            key: 'fullName',\r\n\r\n        },\r\n        {\r\n            title: 'Số tiền ủng hộ',\r\n            dataIndex: 'amountToDonate',\r\n            key: 'amountToDonate',\r\n            render: text => (\r\n                <>\r\n                    {convertNumber(text)} đ\r\n                </>\r\n            ),\r\n        }\r\n    ];\r\n    let html = Donate.content;\r\n    let happinessContent = Donate.happinessContent\r\n    const viewAll = () => {\r\n        history.push(`/xem-tat-ca-nguoi-ung-ho/${_id}`)\r\n    }\r\n    console.log(data);\r\n    const onFinishMomo=(values)=>{\r\n        //console.log(\"momo\",values);\r\n        checkBtn();\r\n        //const user = JSON.parse(localStorage.getItem(\"user\"));\r\n        if(user){\r\n            values['userId']=user._id;\r\n        }\r\n        let ms = Date.now()\r\n        values['orderId'] =\"MM\"+ms;\r\n        values['requestId'] =\"MM\"+ms;\r\n        values['checked'] = checked;\r\n        values['orderInfo']=Donate.title;    \r\n        values['donateEvent'] =_id.trim();\r\n        console.log(\"momo\",values);\r\n        donateEvensts.postPayMomo(values).then((res)=>{\r\n            console.log(\"data\",res.data);\r\n            if(res.data.MomoPay.errorCode===0)\r\n            {\r\n                let url = res.data.MomoPay.payUrl\r\n                console.log(\"url\",url);\r\n                //history.push(url)\r\n                window.location.replace(url);\r\n\r\n                \r\n            }\r\n        });\r\n\r\n        //console.log(\"Day\",ms);\r\n    }\r\n    const Footer = ()=>{\r\n        return (\r\n            <>\r\n             <section className=\"detail_footer\">\r\n                <div className=\"container\">\r\n                    <h3 className=\"detail_footer_title\">Chương trình liên quan</h3>\r\n                    <div style={{display:\"flex\",justifyContent:\"space-between\"}}>\r\n                   {load === true? (<>\r\n                    {ReleatedPost.map((item) => {\r\n                return (\r\n                    <>\r\n                        <div  className=\"col-2\" >\r\n                            <Badge count={item.categoryName}>\r\n                                <Link to={`${item._id}`} >\r\n                                    <Card className=\"margin-top\"\r\n                                        style={{ borderRadius: 10, height: 460 }}\r\n                                        hoverable\r\n                                        cover={<img alt=\"example\" src={item.image[0]} />}>\r\n                                        <Text className=\"title-text\" style={ellipsis ? { width: 250 } : undefined}\r\n                                            ellipsis={ellipsis ? { tooltip: `${item.title}` } : false} >\r\n                                            {item.title} </Text>\r\n                                        <Text className=\"title-tomtat\"\r\n                                            style={ellipsis ? { width: 250 } : undefined}\r\n                                            ellipsis={ellipsis ? { tooltip: `${item.summary}` } : false} >\r\n                                            {item.summary}\r\n                                        </Text>\r\n                                        {\r\n                                            item.status === \"Dừng nhận donate\" ? (<><p className=\"tamngung\" >Tạm ngưng</p></>) : (<>\r\n                                                <div className=\"progress\">\r\n                                                    <div className=\"progress_detail_top\">\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            {/* convertNumber */(item.currentAmount)} vnđ quyên góp\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">\r\n                                                            {Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\r\n                                                                <p>Hoàn thành</p>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    <p className=\"progress_detail_number\">{((item.currentAmount / item.setAmount) * 100).toFixed(3)}%</p>\r\n                                                                </>\r\n                                                            )}\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <Progress percent={Math.floor((item.currentAmount / item.setAmount) * 100)} showInfo={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                                    <div className=\"progress_detail_bot\">\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            <UsergroupAddOutlined /> {item.numberOfDonations} lượt quyên góp\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">{Number(dayEnd(item.endDay))===0 ||Number(dayEnd(item.endDay))<0 ?(<>Đã hết hạn</>):(<> {dayEnd(item.endDay)} ngày còn lại</>) } </p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </>)\r\n                                        }\r\n                                    </Card>\r\n\r\n                                </Link>\r\n                            </Badge>\r\n                        </div>\r\n                    </>\r\n                )\r\n\r\n            })}\r\n                   </>):(<></>)}\r\n                   \r\n                 \r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n            </>\r\n        )\r\n    }\r\n    const Loading1= ()=>{\r\n        return (\r\n            <>\r\n            Loading ...\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n          <ScrollToTop smooth={true} />\r\n            <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.title}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"NunitoBold\" }}>\r\n                                Số tiền cần quyên góp {convertNumber(Donate.setAmount)}VNĐ </h3>\r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.summary}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                                <Tabs defaultActiveKey=\"1\"/*  onChange={callback} */>\r\n                                    <TabPane tab=\"Câu chuyện\" key=\"2\">\r\n                                        {parse(parse(html))}\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Nhà hảo tâm\" key=\"3\">\r\n                                        <p>Top 50 lần ủng hộ gần nhất</p>\r\n                                        <Table columns={columns} dataSource={AllDonator} />\r\n                                        <Button onClick={viewAll} >Xem tất cả</Button>\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Trao yêu thương\" key=\"4\">\r\n                                        {parse(parse(happinessContent))}\r\n                                    </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <div className=\"card_infoDonate\">\r\n                                    <h3 className=\"card_infoDonate_title\">Thông tin quyên góp</h3>\r\n\r\n                                    <div className=\"progress_detail_top\">\r\n                                        <p className=\"progress_detail_text\">\r\n                                            Đã quyên góp: {convertNumber(DonateID.currentAmount)}VNĐ/{convertNumber(DonateID.setAmount)}VNĐ\r\n                                        </p>\r\n                                        <Progress percent={Math.floor((Donate.currentAmount / Donate.setAmount) * 100)} showInfo={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                        <div className=\"progress_detail_bot \">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Lượt quyên góp\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Đạt được\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Thời hạn còn\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {Donate.numberOfDonations}\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {((DonateID.currentAmount / DonateID.setAmount) * 100).toFixed(3)}%\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {Number(dayEnd(Donate.endDay)) === 0 || Number(dayEnd(Donate.endDay)) < 0 ? (<>Đã hết hạn</>) : (<> {dayEnd(Donate.endDay)} ngày </>)}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card_donate\">\r\n                                    <h3 className=\"card_donate_title\">Quyên góp ngay</h3>\r\n                                                                 \r\n                                    {\r\n                                        Donate.status === \"Dừng nhận donate\" ? (<>\r\n                                            <p className=\"tamngung\" >Tạm ngưng</p>\r\n\r\n                                        </>) : (<>\r\n                                            {\r\n                                                Number(Donate.currentAmount) >= Number(Donate.setAmount) ? (\r\n                                                    <div className=\"progress_detail_top\">\r\n                                                        <p className=\"complete\" >Đã hoàn thành</p>\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            Đã quyên góp: {convertNumber(DonateID.currentAmount)} VNĐ\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">\r\n                                                            {Math.floor((DonateID.currentAmount / DonateID.setAmount) * 100) === 100 ? (\r\n                                                                <p>Hoàn thành</p>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    <p className=\"progress_detail_number\">{((DonateID.currentAmount / DonateID.setAmount) * 100).toFixed(3)}%</p>\r\n                                                                </>\r\n                                                            )}\r\n                                                        </p>\r\n                                                        <Progress percent={Math.floor((Donate.currentAmount / Donate.setAmount) * 100)} showInfo={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                                    </div>\r\n\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <Tabs defaultActiveKey=\"1\" type=\"card\" /* size={size} */>\r\n                                                            <TabPane tab=\"PayPal\" key=\"1\">\r\n                                                                <Steps current={current}>\r\n                                                                    {steps.map(item => (\r\n                                                                        <Step key={item.title} title={item.title} />\r\n                                                                    ))}\r\n                                                                </Steps>\r\n                                                                <div className=\"steps-content\">{steps[current].content()}</div>\r\n                                                                <div className=\"steps-action\">\r\n                                                                    {current < steps.length - 1 && (\r\n                                                                        <Button disabled={\r\n                                                                            licked === true ? (false) : (true)} type=\"primary\" onClick={() => next()}>\r\n                                                                            Tiếp theo\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                    {current === steps.length - 1 && (\r\n                                                                        <Button type=\"primary\" onClick={showModal}>\r\n                                                                            Xác nhận\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                    {current > 0 && (\r\n                                                                        <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                                                            Trở lại\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                </div>\r\n                                                            </TabPane>\r\n                                                            <TabPane tab=\"Momo\" key=\"2\">\r\n                                                            <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\",phone:\"\" }}\r\n                                    onFinish={onFinishMomo}\r\n                                    ///onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                                 rules={[{ min: 10,max:11, message: 'Số điện thoại từ 10-11 số !' },\r\n                                                 {\r\n                                                    pattern: new RegExp(/^\\+?(\\d.*){10,11}$/),\r\n                                                    message: \"Vui lòng nhập đúng số điện thoại !\",\r\n                                                },]}\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ \"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                    {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                               \r\n                                            }} >\r\n                                                <Button type=\"primary\" className=\"checkout-title\"  htmlType=\"submit\"> \r\n                                                    Gửi tiền bằng Ví MoMo\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ \"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    }, {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                    \r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" className=\"checkout-title\" htmlType=\"submit\">\r\n                                                Gửi tiền bằng Ví MoMo\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", fullName: `${user.fullName}`, phone: `${\"\"}` }}\r\n                                            onFinish={onFinishMomo}\r\n                                            //onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"fullName\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n                                                        rules={[{ min: 10,max:11, message: 'Số điện thoại từ 10-11 số !' },\r\n                                                        {\r\n                                                            pattern: new RegExp(/^\\+?(\\d.*){10,11}$/),\r\n                                                            message: \"Vui lòng nhập đúng số điện thoại !\",\r\n                                                        },]}\r\n                                                    >\r\n                                                        <Input style={{ width: '100%'}}  />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ \"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            }, {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                           \r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                   \r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} className=\"checkout-title\" type=\"primary\" htmlType=\"submit\">\r\n                                                        Gửi tiền bằng Ví MoMo\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ \"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                            {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button className=\"checkout-title\" type=\"primary\" htmlType=\"submit\">\r\n                                                        Gửi tiền bằng Ví MoMo\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n                    </>\r\n                                                              \r\n                                                            </TabPane>\r\n                                                        </Tabs>\r\n                                                    </>\r\n\r\n                                                )\r\n                                            }\r\n                                        </>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <Divider></Divider>\r\n            {load ? <Loading1 /> : <Footer />}\r\n            <Modal title=\"Cám ơn\" visible={isModalVisible} footer={null} onOk={handleOk} onCancel={handleCancel}>\r\n                <Result\r\n                    status=\"success\"\r\n                    title=\"Cám ơn bạn đã quyên góp!\"\r\n                    subTitle=\"Số tiền sẽ được gửi ngay khi chương trình kết thúc !!!\"\r\n\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AboutUs.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\MailPost.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Join.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListALl.js",["150"],"import { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Badge, Button, Card, Input, Progress, Typography } from 'antd';\r\nimport { FormProvider } from 'rc-field-form';\r\nimport React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Home.scss\";\r\nconst { Search } = Input;\r\nconst ListALl = (props) => {\r\n\r\n    const [list, /* setlist */] = useState([props.listDonate]);\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const [visible, setVisible] = useState(9);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const showMoreItem = () => {\r\n        setVisible((prevValue) => prevValue + 6);\r\n    };\r\n\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    const onSearch = (value) => {\r\n        setSearchTerm(value.target.value);\r\n        console.log(value.target.value);\r\n    }\r\n    console.log(list);\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    \r\n    /*  useEffect(() => {\r\n         const results = people.filter(person =>\r\n           person.toLowerCase().includes(searchTerm)\r\n         );\r\n         setSearchResults(results);\r\n       }, [searchTerm]); */\r\n    const results = !searchTerm\r\n        ? props.listDonate\r\n        : props.listDonate.filter(list =>\r\n            list.title.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n        );\r\n    //setSearchResults(results)\r\n    console.log(results);\r\n    return (\r\n        <>\r\n            <Search className=\"input-search\" type=\"text\"\r\n                placeholder=\"Tìm kiếm\"\r\n                value={searchTerm}\r\n                onChange={onSearch} style={{ width: 800 }}\r\n            />\r\n            {results.slice(0, visible).map((item) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"col-4 \" >\r\n                            <Badge count={item.categoryName}>\r\n                                <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n                                    <Card className=\"margin-top\"\r\n                                        style={{ borderRadius: 10, height: 460 }}\r\n                                        hoverable\r\n                                        cover={<img alt=\"example\" src={item.image[0]} />}>\r\n                                        <Text className=\"title-text\" style={ellipsis ? { width: 250 } : undefined}\r\n                                            ellipsis={ellipsis ? { tooltip: `${item.title}` } : false} >\r\n                                            {item.title} </Text>\r\n                                        <Text className=\"title-tomtat\"\r\n                                            style={ellipsis ? { width: 250 } : undefined}\r\n                                            ellipsis={ellipsis ? { tooltip: 'Xem chi tiết !' } : false} >\r\n                                            {item.summary}\r\n                                        </Text>\r\n                                        {\r\n                                            item.trangThai === \"Dừng nhận donate\" ? (<><p className=\"tamngung\" >Tạm ngưng</p></>) : (<>\r\n\r\n                                                <div className=\"progress\">\r\n                                                    <div className=\"progress_detail_top\">\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            {convertNumber(item.currentAmount)} vnđ quyên góp\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">\r\n\r\n                                                            {Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\r\n                                                                <p>Hoàn thành</p>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    <p className=\"progress_detail_number\">{((item.currentAmount / item.setAmount) * 100).toFixed(3)}%</p>\r\n\r\n                                                                </>\r\n\r\n                                                            )}\r\n\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <Progress percent={Math.floor((item.currentAmount / item.setAmount) * 100)} showInfo={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                                    <div className=\"progress_detail_bot\">\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            <UsergroupAddOutlined /> {item.luotDonate} lượt quyên góp\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">{dayEnd(item.endDay)} ngày còn lại</p>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n\r\n                                            </>)\r\n                                        }\r\n\r\n\r\n                                    </Card>\r\n\r\n                                </Link>\r\n                            </Badge>\r\n                        </div>\r\n\r\n                    </>\r\n                )\r\n\r\n            })}\r\n            <Button onClick={showMoreItem} className=\"ant-btn ant-btn-primary bnt-load-more\" to=\"/tat-ca-chuong-trinh\" >Xem thêm </Button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListALl;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js",["151","152","153","154"],"import { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Button, Card, Checkbox, Form, Input, /* InputNumber, */ message, Modal, Progress, Result, Select, Steps, Typography } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PayPal from \"../components/Paypal\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Home.scss\";\r\n//import ListDonate from \"./ListDonate\";\r\n//import donateEvensts from \"../Api/donateEvensts\";\r\n//import { logout } from \"../redux/actions/auth.js\";\r\nimport \"../style/HotListDonate.scss\";\r\nimport Momo from \"./Momo\";\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst phoneSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n            <Option value=\"84\">+84</Option>\r\n            <Option value=\"85\">+85</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\nconst HotListDonate = (props) => {\r\n    const [donator, setDonator] = useState(null)\r\n    const [id, setid] = useState('');\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [licked, setLicked] = useState(false);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const data = useSelector(state => state.login.user);\r\n    const user= JSON.parse(localStorage.getItem(\"user\"))\r\n    const [Listhost, setListhost] = useState(props.listDonates);\r\n    const [form] = Form.useForm();\r\n    //const [Count, setCount] = useState(0);\r\n    //const order= JSON.parse(localStorage.getItem(\"user\"))\r\n//console.log(order);\r\n    useEffect(() => {\r\n        setListhost(props.listDonates);\r\n    }, [props.listDonates, licked,id,user])\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n        console.log('Content: ', e.currentTarget.dataset.id);\r\n        let id = e.currentTarget.dataset.id\r\n        let filterProduct = [];\r\n\r\n        filterProduct = props.listDonates.filter(\r\n            listDonates => listDonates._id === id\r\n        )\r\n        //setid(filterProduct[0]._id)\r\n        setid(filterProduct[0]._id);\r\n        setDonator(filterProduct)\r\n        setLicked(false)\r\n\r\n\r\n\r\n    };\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n  /*   const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        setCurrent(0)\r\n        \r\n    }; */\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setLicked(false)\r\n        form.resetFields();\r\n        setCurrent(0)\r\n\r\n    };\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n        setLicked(false)\r\n    };\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        onChange(setChecked(e.target.checked))\r\n\r\n\r\n    }\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n    const checkBtn = () => {\r\n        setLicked(true)\r\n       \r\n    }\r\n    /* if(order){\r\n        setCount(1)\r\n    } */\r\n    //console.log(isLoggedIn);\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n                    console.log('Success:', values);\r\n                    checkBtn();\r\n                    values['checked'] = checked;\r\n                    values['donateEvent'] = id;\r\n                    values['orderInfo']= donator[0].title;\r\n                    if(user){\r\n                        values['userId']=user._id;\r\n                    }\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    form={form}\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\" }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                \r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                    {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    }, {\r\n                                                           \r\n                                                        min:5,\r\n                                                        message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                    },\r\n                                                    {\r\n                                                        pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                        message: \"Số tiền không chứa chữ !\",\r\n                                                    }\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <Input\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            form={form} \r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", fullName: `${user.fullName}`,phone:`${\"\"}`}}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                           \r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"fullName\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n                                                        \r\n\r\n                                                    >\r\n                                                        <Input  />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            }, {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            }, {\r\n                                                           \r\n                                                                min:5,\r\n                                                                message: \"Số tiền ủng hộ từ 10.000 trở lên\",\r\n                                                            },\r\n                                                            {\r\n                                                                pattern: new RegExp(/^\\d*\\.?\\d+$/),\r\n                                                                message: \"Số tiền không chứa chữ !\",\r\n                                                            }\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <Input\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"message\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.amountToDonate)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.message}</p>\r\n                        <p>Gửi tiền bằng</p>\r\n                        <Momo></Momo>\r\n                        <p>Hoặc</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n\r\nconsole.log(data);\r\n\r\n    return (\r\n        <>\r\n            {Listhost\r\n            .filter(Listhost => Listhost.hotPost === true)\r\n            .map((item) => {\r\n                /* if (item.tinNoiBat === true) { */\r\n                    return (\r\n                        <>\r\n                            <div key={item._id} className=\"col-6 card\">\r\n                                <Card\r\n                                    key='1'\r\n                                    hoverable\r\n                                    style={{ borderRadius: 10, height: 260, width: \"100%\" }}\r\n                                    cover={<img height=\"100%\" alt=\"example\" src={item.image[0]} />}\r\n                                >\r\n                                    <p style={{ display: \"none\" }} data-id={item._id}></p>\r\n                                    <div className=\"detail\">\r\n                                        <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n                                            <Text className=\"title-text\" style={ellipsis ? { width: 200 } : undefined, {  color: \"#1890ff\" }}\r\n                                                ellipsis={ellipsis ? { tooltip: `${item.title}` } : false} >\r\n                                                {item.title} </Text>\r\n                                        </Link>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n\r\n                                                    {convertNumber(item.currentAmount)\r\n                                                    } VNĐ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{((item.currentAmount / item.setAmount) * 100).toFixed(3)}%</p>\r\n\r\n                                            </div>\r\n                                            <Progress percent={Math.floor((item.currentAmount / item.setAmount) * 100)} showInfo={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />{item.numberOfDonations} lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{Number(dayEnd(item.endDay))===0 ||Number(dayEnd(item.endDay))<0 ?(<>Đã hết hạn</>):(<>{dayEnd(item.endDay)} ngày còn lại</>) } </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        {\r\n                                            Number(item.currentAmount) >= Number(item.setAmount) ? (<p className=\"complete\" >Đã hoàn thành</p>) : (<p className=\"ant-btn ant-btn-primary \" data-id={item._id} onClick={showModal}>Ủng hộ ngay</p>)\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n                        </>)\r\n                /* } */\r\n            })\r\n            }\r\n            {donator != null ? (\r\n                <>\r\n\r\n                    <Modal title={donator[0].title} visible={isModalVisible} footer={null} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <>\r\n                                    {<Button className=\"btn-disabled\" disabled={\r\n                                        licked ===true?(false):(true) } \r\n                                        type=\"primary\" onClick={() => next()}>\r\n                                        Tiếp theo\r\n                                    </Button>}\r\n                                </>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Modal title={\"ủng hộ\"} footer={null} visible={isModalVisible}  onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={onChange, () => next()}>\r\n                                    Tiếp theo\r\n                                </Button>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nexport default HotListDonate;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js",["155"],"import { LockOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, Modal, Tabs } from 'antd';\r\nimport React, { createRef, useState } from 'react';\r\nimport GoogleButton from 'react-google-button';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { /* useHistory, */ Redirect } from 'react-router-dom';\r\nimport { login, register } from \"../redux/actions/auth.js\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/ModalLogin.scss\";\r\nimport firebase from 'firebase';\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\r\nconst { TabPane } = Tabs;\r\nconst uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInSuccessUrl: \"/\",\r\n    signInOptions: [\r\n        firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n\r\n\r\n    ]\r\n}\r\nconst ModalLogin = () => {\r\n    //const [form] = Form.useForm();\r\n    const form = createRef();\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const [Error, setError] = useState(\"\");\r\n    const [ErrorRegister, setErrorRegister] = useState(\"\");\r\n    //const [Key, setKey] = useState(\"\");\r\n    //const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    //const { isLoggedIn } = useSelector(state => state.auth);\r\n    //const message = useSelector(state => state.auth.user);\r\n    //const history = useHistory();\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        form.current.resetFields();\r\n        setError(\"\")\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        form.current.resetFields();\r\n        setError(\"\")\r\n    };\r\n    const onFinish = (values) => {\r\n        //setLoading(true);\r\n        form.current.resetFields();\r\n        dispatch(login(values))\r\n            .then((res) => {\r\n                console.log(res);\r\n                setError(res)\r\n            })\r\n        console.log('Received values of form: ', values);\r\n    };\r\n    const onResgiter = (values) => {\r\n        console.log(values);\r\n        dispatch(register(values)).then((res) => {\r\n            console.log(res);\r\n            setErrorRegister(res)\r\n        })\r\n    }\r\n    if (isLoggedIn !== null) {\r\n        <Redirect to=\"/\" />\r\n    }\r\n    return (\r\n        <>\r\n            <Button className=\"ant-btn-login\" data-id=\"1\" type=\"primary\" onClick={showModal}>\r\n                Đăng nhập / Đăng kí\r\n            </Button>\r\n            <Modal visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}\r\n                width={800} footer={null}\r\n            >\r\n                <Tabs /* onChange={callback} */>\r\n                    <TabPane tab=\"Đăng nhập\" key=\"1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6 bg-login\">\r\n\r\n                            </div>\r\n                            <div className=\"col-6 frm\" >\r\n                                <h3>Xin Chào !</h3>\r\n                                <Form\r\n                                    name=\"normal_login\"\r\n                                    className=\"login-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={onFinish}\r\n                                    ref={form}\r\n                                >\r\n                                    <p style={{ color: \"red\" }} className=\"error\">{Error}</p>\r\n                                    <p>Tài khoản </p>\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[\r\n                                            { required: true, message: 'Hãy nhập tài khoản!' },\r\n                                            {\r\n                                                pattern: new RegExp(/^[a-zA-Z0-9]{3,16}$/),\r\n                                                message: \"Tài khoản phải không có kí tự đặc biệt !\",\r\n                                            },\r\n                                            {\r\n                                                min:3,\r\n                                                max:16,\r\n                                                message: 'Tài khoản phải từ 3-16 kí tự !',\r\n                                            }\r\n                                        ]}>\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Tài khoản\" autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p>Mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập mật khẩu!' },\r\n                                        {\r\n                                            min:8,\r\n                                            max:16,\r\n                                            message: 'Mật khẩu phải từ 8-16 kí tự !',\r\n                                        }]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Mật khẩu\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                            Đăng nhập\r\n                                        </Button>\r\n\r\n                                    </Form.Item>\r\n                                </Form>\r\n                                <p style={{fontWeight:\"bolder\"}}>Hoặc</p>\r\n                                <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </TabPane>\r\n\r\n                    <TabPane tab=\"Đăng kí\" key=\"2\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-6 bg-register\">\r\n\r\n                            </div>\r\n                            <div className=\"col-6 frm\" >\r\n                                <h3>Tạo tài khoản !</h3>\r\n                                <Form\r\n                                    name=\"normal_resgiter\"\r\n                                    className=\"resgiter-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={onResgiter}\r\n                                    ref={form} >\r\n                                    <p style={{ color: \"red\" }} className=\"error\">{ErrorRegister}</p>\r\n\r\n                                    <p><span>*</span> Tài khoản </p>\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập tài khoản!' },\r\n                                        {\r\n                                            pattern: new RegExp(/^[a-zA-Z0-9]{3,16}$/),\r\n                                            message: \"Tài khoản phải không có kí tự đặc biệt !\",\r\n                                        }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p><span>*</span> Họ và tên</p>\r\n                                    <Form.Item\r\n                                        name=\"fullName\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập họ tên !' }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p><span>*</span> Mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[\r\n                                            { required: true, message: 'Hãy nhập mật khẩu!' },\r\n                                            { min: 8, message: 'Mật khẩu phải đủ 8 kí tự' }\r\n                                        ]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <p><span>*</span> Nhập lại mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"passwordConfirm\"\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Hãy nhập mật khẩu !',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                                validator(_, value) {\r\n                                                    if (!value || getFieldValue('password') === value) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject(new Error('Hai mật khẩu phải trùng nhau !'));\r\n                                                },\r\n                                            }),\r\n                                        ]}>\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n\r\n                                    <p><span>*</span> Email</p>\r\n                                    <Form.Item\r\n                                        name=\"email\"\r\n                                        rules={[\r\n                                            {\r\n                                                type: 'email',\r\n                                                message: 'The input is not valid E-mail!',\r\n                                            },\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Please input your E-mail!',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"resgister-form-button\">\r\n                                            Đăng kí\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </div>\r\n                        </div>\r\n                    </TabPane>\r\n                </Tabs>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default ModalLogin;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\EditProfile.js",["156"],"import React, { createRef, useState } from 'react';\r\nimport { Modal, Form, Input, Button, message } from 'antd';\r\nimport { LockOutlined, KeyOutlined } from '@ant-design/icons';\r\nimport '../style/Profile.scss';\r\nimport UserApi from '../Api/UserApi';\r\nconst Profile = () => {\r\n    const [Error, setError] = useState(\"\");\r\n    /* const normFile = (e) => {\r\n\r\n        if (Array.isArray(e)) {\r\n            setFile(e.fileList[0].name)\r\n\r\n        }\r\n        return e && e.fileList;\r\n\r\n    }; */\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        UserApi.putUpdateProfile(values)\r\n        .then((res) => {\r\n            if (res.data.status === \"success\") {\r\n                message.success(\"Cập nhật thông tin thành công !\")\r\n                localStorage.setItem(\"user\", JSON.stringify(res.data.User));\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000)\r\n            }\r\n            if (res.data.status === \"error\") {\r\n                message.success(\"Cập nhật thông tin thành công !\")\r\n                localStorage.setItem(\"user\", JSON.stringify(res.data.User));\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            console.log(\"Loi nè: \",error);\r\n        })\r\n    };\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const form = createRef();\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n   const onChangePass =( values)=>{\r\n    UserApi.putChangePasss(values).then((res)=>{\r\n            console.log(res);\r\n            if (res.data.status === \"success\") {\r\n                message.success(\"Thay đổi mật khẩu thành công !\")\r\n                setTimeout(() => {\r\n                    handleCancel()\r\n                }, 1000)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error);\r\n            setError(error.response.data.error)\r\n        })\r\n\r\n   }\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    //console.log(user.phone);    \r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"profile\">\r\n                        <Form\r\n                            name=\"basic\"\r\n                            className=\"profile_form\"\r\n                           /*  labelCol={{ span: 8 }}\r\n                            wrapperCol={{ span: 16 }} */\r\n                            initialValues={{ username: `${user.username}`, fullName: `${user.fullName}`, email: `${user.email}`, id: `${user._id}` }}\r\n                            onFinish={onFinish}\r\n                            onFinishFailed={onFinishFailed} >\r\n                            <Form.Item\r\n                                name=\"id\"\r\n                                hidden>\r\n                                <Input readOnly autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                            label=\"Tên tài khoản:\"\r\n                                name=\"username\">\r\n                                <Input readOnly autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                            label=\"Họ và tên:\"\r\n                                name=\"fullName\">\r\n                                <Input autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                            label=\"Email\"\r\n                                name=\"email\">\r\n                                <Input autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <Form.Item >\r\n                                <Button onClick={showModal}> <KeyOutlined />Đổi mật khẩu</Button>\r\n                            </Form.Item>\r\n                            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Cập nhật\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal className=\"model_pass\" footer={null} title=\"Đổi mật khẩu\" visible={isModalVisible} onCancel={handleCancel}>\r\n                <Form\r\n                    name=\"normal_resgiter\"\r\n                    className=\"resgiter-form\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onChangePass}\r\n                    ref={form}\r\n                >\r\n                    <p style={{ color: \"red\" }}>{Error}</p> \r\n                    <Form.Item\r\n                        label=\"Mật khẩu cũ\"\r\n                        name=\"oldPassword\"\r\n                        rules={[\r\n                            { required: true, message: 'Hãy nhập mật khẩu!' },\r\n                            { min: 8, message: 'Mật khẩu phải đủ 8 kí tự' }\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Mật khẩu mới\"\r\n                        name=\"newPassword\"\r\n                        rules={[\r\n                            { required: true, message: 'Hãy nhập mật khẩu!' },\r\n                            { min: 8, message: 'Mật khẩu phải đủ 8 kí tự' }\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Nhập lại mật khẩu\"\r\n                        name=\"passwordConfirm\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Hãy nhập mật khẩu !',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                    if (!value || getFieldValue('newPassword') === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject(new Error('Hai mật khẩu phải trùng nhau !'));\r\n                                },\r\n                            }),\r\n                        ]}>\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Đổi mật khẩu\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ProfileUser.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js",[],"F:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Momo.js",["157","158","159"],"\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../style/Momo.scss\"\r\nconst Momo = () => {\r\n    const getData = JSON.parse(localStorage.getItem(\"data\"));\r\n    let ms = Date.now()\r\n    getData['orderId'] =\"MM\"+ms;\r\n    getData['requestId'] =\"MM\"+ms;\r\n    //getData['checked'] = checked;\r\n    //getData['orderInfo']=Donate.title;\r\n    //getData['donateEvent'] = _id;\r\n    console.log(getData);\r\n    const PayMomo = () => {\r\n        const url = \"http://localhost:4000/api/payMomo\";\r\n        axios.post(url,getData).then((res)=>{\r\n            console.log(\"data\",res.data);\r\n            if(res.data.MomoPay.errorCode===0)\r\n            {\r\n                let url = res.data.MomoPay.payUrl\r\n                console.log(\"url\",url);\r\n                window.open(url)\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <div class=\"checkout-button\">\r\n            <div class=\"content\" >\r\n                <p onClick={PayMomo} class=\"checkout-title\">\r\n                    Thanh toán bằng Ví MoMo\r\n                </p>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Momo;\r\n",{"ruleId":"160","severity":1,"message":"161","line":34,"column":11,"nodeType":"162","messageId":"163","endLine":34,"endColumn":21},{"ruleId":"164","severity":1,"message":"165","line":77,"column":6,"nodeType":"166","endLine":77,"endColumn":8,"suggestions":"167"},{"ruleId":"160","severity":1,"message":"168","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"169","line":1,"column":28,"nodeType":"162","messageId":"163","endLine":1,"endColumn":45},{"ruleId":"160","severity":1,"message":"170","line":1,"column":47,"nodeType":"162","messageId":"163","endLine":1,"endColumn":62},{"ruleId":"160","severity":1,"message":"171","line":1,"column":64,"nodeType":"162","messageId":"163","endLine":1,"endColumn":79},{"ruleId":"160","severity":1,"message":"172","line":2,"column":42,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"164","severity":1,"message":"173","line":89,"column":8,"nodeType":"166","endLine":89,"endColumn":24,"suggestions":"174"},{"ruleId":"164","severity":1,"message":"175","line":130,"column":40,"nodeType":"176","endLine":130,"endColumn":45},{"ruleId":"160","severity":1,"message":"177","line":139,"column":11,"nodeType":"162","messageId":"163","endLine":139,"endColumn":19},{"ruleId":"160","severity":1,"message":"178","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":22},{"ruleId":"179","severity":1,"message":"180","line":471,"column":118,"nodeType":"181","messageId":"182","endLine":471,"endColumn":119},{"ruleId":"179","severity":1,"message":"180","line":527,"column":77,"nodeType":"181","messageId":"182","endLine":527,"endColumn":78},{"ruleId":"179","severity":1,"message":"180","line":551,"column":73,"nodeType":"181","messageId":"182","endLine":551,"endColumn":74},{"ruleId":"179","severity":1,"message":"180","line":556,"column":77,"nodeType":"181","messageId":"182","endLine":556,"endColumn":78},{"ruleId":"160","severity":1,"message":"183","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":20},{"ruleId":"160","severity":1,"message":"184","line":46,"column":11,"nodeType":"162","messageId":"163","endLine":46,"endColumn":19},{"ruleId":"160","severity":1,"message":"185","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":23},{"ruleId":"160","severity":1,"message":"186","line":2,"column":25,"nodeType":"162","messageId":"163","endLine":2,"endColumn":34},{"ruleId":"160","severity":1,"message":"187","line":2,"column":36,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["188"],"'FacebookOutlined' is defined but never used.","'InstagramOutlined' is defined but never used.","'TwitterOutlined' is defined but never used.","'YoutubeOutlined' is defined but never used.","'createRef' is defined but never used.","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.",["189"],"Assignments to the 'componentMounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'Location' is assigned a value but never used.","'FormProvider' is defined but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'GoogleButton' is defined but never used.","'handleOk' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [dispatch]",{"range":"194","text":"195"},"Update the dependencies array to be: [_id, idCategoryPost]",{"range":"196","text":"197"},[2747,2749],"[dispatch]",[3182,3198],"[_id, idCategoryPost]"]