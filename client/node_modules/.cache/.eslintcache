[{"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js":"1","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js":"2","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js":"3","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js":"4","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js":"5","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js":"6","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js":"7","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js":"8","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js":"9","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js":"10","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js":"11","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js":"12","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js":"13","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js":"14","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js":"15","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js":"16","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js":"17","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js":"18","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js":"19","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js":"20","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js":"21","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js":"22","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js":"23","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js":"24","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js":"25","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js":"26","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js":"27","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Contact.js":"28","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AllDonate.js":"29","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListALl.js":"30","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListRadom.js":"31","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\ListDonator.js":"32","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Momo.js":"33"},{"size":777,"mtime":1626765232133,"results":"34","hashOfConfig":"35"},{"size":375,"mtime":1624076310741,"results":"36","hashOfConfig":"35"},{"size":3271,"mtime":1627107758715,"results":"37","hashOfConfig":"35"},{"size":4558,"mtime":1626766185019,"results":"38","hashOfConfig":"35"},{"size":7225,"mtime":1624076310739,"results":"39","hashOfConfig":"35"},{"size":18214,"mtime":1627042012600,"results":"40","hashOfConfig":"35"},{"size":57323,"mtime":1628751232640,"results":"41","hashOfConfig":"35"},{"size":266,"mtime":1625290642505,"results":"42","hashOfConfig":"35"},{"size":350,"mtime":1624076310738,"results":"43","hashOfConfig":"35"},{"size":1305,"mtime":1628440485710,"results":"44","hashOfConfig":"35"},{"size":3208,"mtime":1627189003080,"results":"45","hashOfConfig":"35"},{"size":524,"mtime":1626764469249,"results":"46","hashOfConfig":"35"},{"size":166,"mtime":1624456360714,"results":"47","hashOfConfig":"35"},{"size":1148,"mtime":1627020599091,"results":"48","hashOfConfig":"35"},{"size":371,"mtime":1624467488953,"results":"49","hashOfConfig":"35"},{"size":317,"mtime":1624456000973,"results":"50","hashOfConfig":"35"},{"size":27476,"mtime":1628753668808,"results":"51","hashOfConfig":"35"},{"size":6043,"mtime":1627055268003,"results":"52","hashOfConfig":"35"},{"size":3629,"mtime":1625119163285,"results":"53","hashOfConfig":"35"},{"size":1830,"mtime":1627068442099,"results":"54","hashOfConfig":"35"},{"size":1901,"mtime":1627061517910,"results":"55","hashOfConfig":"35"},{"size":10588,"mtime":1627071446453,"results":"56","hashOfConfig":"35"},{"size":4321,"mtime":1627037123934,"results":"57","hashOfConfig":"35"},{"size":8136,"mtime":1628668954813,"results":"58","hashOfConfig":"35"},{"size":1203,"mtime":1626766153056,"results":"59","hashOfConfig":"35"},{"size":606,"mtime":1625259365415,"results":"60","hashOfConfig":"35"},{"size":499,"mtime":1625934576025,"results":"61","hashOfConfig":"35"},{"size":4453,"mtime":1626765182396,"results":"62","hashOfConfig":"35"},{"size":6427,"mtime":1627042471111,"results":"63","hashOfConfig":"35"},{"size":6174,"mtime":1627042347468,"results":"64","hashOfConfig":"35"},{"size":861,"mtime":1627106387114,"results":"65","hashOfConfig":"35"},{"size":6093,"mtime":1628320090599,"results":"66","hashOfConfig":"35"},{"size":1140,"mtime":1628752110339,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1v8q40h",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"99"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js",[],["150","151"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js",["152","153"],"import './App.css';\r\nimport Header from './components/Header';\r\nimport 'antd/dist/antd.css';\r\nimport Home from './pages/Home';\r\nimport Footer from './components/Footer';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Detail from './pages/Detail';\r\n//import Login from './pages/Login';\r\nimport Resgister from './pages/Resgister';\r\nimport Profile from './pages/Profile'\r\nimport React, { useState, useEffect } from 'react';\r\n//import ScrollToTop from \"react-scroll-to-top\";\r\nimport firebase from 'firebase';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { unwrapResult } from '@reduxjs/toolkit';\r\nimport { getMe } from './redux/reducer/UserSlice';\r\nimport Contact from './pages/Contact';\r\nimport AllDonate from './pages/AllDonate';\r\nimport ScrollToTop from './Api/ScrollToTop';\r\nimport ListDonator from './pages/ListDonator';\r\n// Configure Firebase.\r\nconst config = {\r\n  apiKey: 'AIzaSyBuvMsY6qXN0XOR2pjo9g0YJ9JC5yfh9rE',\r\n  authDomain: 'fashionshop-11d42.firebaseapp.com',\r\n  // ...\r\n};\r\nfirebase.initializeApp(config);\r\nfunction App() {\r\n  \r\n  const [/* isSignedIn */, setIsSignedIn] = useState(false); // Local signed-in state.\r\n  const { isLoggedIn } = useSelector(state => state.login);\r\n  const dispatch = useDispatch();\r\n  // Listen to the Firebase Auth state and set the local state.\r\n  useEffect(() => {\r\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async (user) => {\r\n      setIsSignedIn(!!user);\r\n      if (!user) {\r\n        console.log(\"Chưa đăng nhập\");\r\n        return\r\n      }\r\n      try {\r\n        const actionResult = await dispatch(getMe());\r\n        const currentUser = unwrapResult(actionResult);\r\n        localStorage.setItem(\"user\", JSON.stringify(currentUser));\r\n        console.log('Logged in user: ', currentUser);\r\n\r\n      } catch (error) {\r\n        console.log('Failed to login ', error.message);\r\n        // show toast error\r\n      }\r\n      console.log(\"Đã đăng nhập\");\r\n    });\r\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\r\n\r\n  }, []);\r\n  if (isLoggedIn) {\r\n    <Redirect to=\"/\" />\r\n\r\n  }\r\n  return (\r\n\r\n    <Router>\r\n     \r\n        <Header />\r\n        <Route onUpdate={() => window.scrollTo(0, 0)} exact path=\"/\">\r\n          <Home onUpdate={() => window.scrollTo(0, 0)} />\r\n\r\n        </Route>\r\n        <Route exact path=\"/lien-he\">\r\n          <Contact />\r\n\r\n        </Route>\r\n        <Route onUpdate={() => window.scrollTo(0, 0)} exact path=\"/tat-ca-chuong-trinh\">\r\n          <AllDonate />\r\n\r\n        </Route>\r\n        <Switch>\r\n          <Route exact path=\"/thong-tin-chi-tiet/:_id\">\r\n            <Detail />\r\n          </Route>\r\n          <Route exact path=\"/xem-tat-ca-nguoi-ung-ho/:_id\">\r\n            <ListDonator />\r\n          </Route>\r\n          \r\n          <Route exact path=\"/thong-tin-tai-khoan\">\r\n            <Profile />\r\n          </Route>\r\n          {/* <Route exact path=\"/dang-nhap\">\r\n            <Login />\r\n          </Route> */}\r\n          <Route exact path=\"/dang-ki\">\r\n            <Resgister />\r\n          </Route>\r\n        </Switch>\r\n        <Footer  onUpdate={() => window.scrollTo(0, 0)} />\r\n    \r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js",["154","155","156"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Button, Tabs,Spin } from 'antd';\r\nimport { CheckOutlined } from '@ant-design/icons';\r\nimport donateEvensts from '../Api/donateEvensts';\r\n//import { Link } from \"react-router-dom\";\r\nimport \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\n//import PayPal from \"../components/Paypal\"\r\nimport HotListDonate from \"../components/HotListDonate\"\r\nimport ListDonate from '../components/ListDonate';\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect,Link } from 'react-router-dom';\r\n\r\n//import { useCookies } from 'react-cookie';\r\n\r\nconst { TabPane } = Tabs;\r\nconst Home = () => {\r\n    const [listDonates, setListdonates] = useState([]);\r\n    const [listDonate, setListdonate] = useState([]);\r\n    const [listCategory, setListCategory] = useState([]); \r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const [loadingSum, setLoadingSum] = useState(false);\r\n    //const [Count, /* setCount */] = useState(0);\r\n    //const  data  = useSelector(state => state.auth.user);\r\n    //const order= JSON.parse(localStorage.getItem(\"orderStatus\"))\r\n        //console.log(data);\r\n        //window.scrollTo({ behavior: 'smooth' });\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    setListdonates(res.data.DonateEnvents);\r\n                    setListdonate(res.data.DonateEnvents)\r\n                });\r\n                setLoadingSum(true)\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n     \r\n        const fetchCategory = async () => {\r\n            try {\r\n                await donateEvensts.getCategory().then((res) => {\r\n                    setListCategory(res.data.CategoryDonateEvents)\r\n                });\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n\r\n        fetchCategory();\r\n        fetchdonatesData();\r\n\r\n    }, []);\r\n    console.log(listDonate);\r\n    console.log(listDonates);\r\n    const handleClick = (e) => {\r\n        setListdonate(listDonates);\r\n        let filterProduct = [];\r\n        if (e === \"1\") {\r\n            filterProduct = listDonates;\r\n        } else {\r\n\r\n            filterProduct = listDonates.filter(\r\n                listDonates => listDonates.categoryPost === e\r\n            )\r\n            setListdonate(filterProduct)\r\n            console.log(filterProduct);\r\n\r\n\r\n        }\r\n    };\r\n    for (let i = 0; i < listDonate.length; i++) {\r\n        for (let j = 0; j < listCategory.length; j++) {\r\n            if (listDonate[i].categoryPost === listCategory[j]._id) {\r\n                //console.log(listCategory[j].tenloai);\r\n                listDonate[i].categoryName = listCategory[j].CategoryName;\r\n                //console.log(listDonate);\r\n            }\r\n\r\n        }\r\n    }\r\n    const [form] = Form.useForm();\r\n    const iconStyle = {\r\n        color: \"#2569d9\"\r\n    }\r\n    const researchStyle = {\r\n        backgroundImage: `url(\"../images/about.png\")`,\r\n    }\r\n    const bghomepageRegister = {\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundImage: `url(\"../images/donate/bg-rs.jpg\")`,\r\n\r\n    }\r\n    const sumConinDonate = ()=>{\r\n        let sum = 0\r\n        for (let i = 0; i < listDonate.length; i++) {\r\n             sum =sum+  Number(listDonate[i].currentAmount);\r\n            \r\n        }\r\n        \r\n        return sum.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")\r\n    }\r\n    //console.log(listDonate);\r\n    if(isLoggedIn){\r\n        <Redirect to=\"/\" />\r\n    \r\n      }\r\n    return (\r\n        <>\r\n          <ScrollToTop smooth={true} />\r\n            <div className=\"homepage container-sm\">\r\n                <div className=\"homepage_content col-10 offset-1 \">\r\n                    <div>\r\n                        <h2 className=\"title\" >Hãy quyên góp cho những hoạt động mà bạn quan tâm</h2>\r\n                    </div>\r\n                    <div className=\"commitment\">\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />0% phí dịch vụ</p></div>\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />Thiết kế cho mục đích từ thiệt</p></div>\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />Được nhiều tổ chức từ thiện tin tưởng</p></div>\r\n                    </div>\r\n                    <div className=\"button\">\r\n                        <div className=\"button_wapper \">\r\n                            <a type=\"button\" className=\"ant-btn ant-btn-primary btn-explore\" href=\"/explore\"><span className=\"btn-text\">Tìm hiểu về tổ chức từ thiện</span></a>\r\n                        </div>\r\n                       {/*  <div className=\"button_wapper \">\r\n                            <a type=\"button\" className=\"ant-btn ant-btn-default btn-sign-in\" href=\"/explore\"><span className=\"btn-text\">Explore Charities</span></a>\r\n                        </div> */}\r\n\r\n                    </div>\r\n                    <div className=\"text_wapper\">\r\n                        <p className=\"text-bold \">Chúng tôi đã quyên góp được</p>\r\n                        <h2 className=\"text-bold\"><span>\r\n                            { sumConinDonate()} VNĐ \r\n\r\n\r\n                            </span></h2>\r\n                        <div className=\"icon-micro-heart\"><img width=\"50px\" alt=\"Heart\" src=\"../images/hands.svg\" /></div>\r\n                        <div className=\"mb-1x\"><span className=\"text-medium\"><div className=\"html-sanitizer\">Hãy giúp chúng thôi một tay</div></span></div>\r\n                        <div className=\"text_wapper-about\"><a href=\"/about-us\"><span className=\"text-bold text-uppercase\">Tìm hiểu về chúng tôi</span></a></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={researchStyle} className=\"bg homepage_research\">\r\n                <div className=\"container\">\r\n                    <div className=\"research_text col-10 offset-1 \">\r\n                        <h2 className=\"text-bold\">Hãy chung tay quyên góp</h2>\r\n                        <p>YÊU THƯƠNG LAN TỎA TỪ NHỮNG CHUYẾN HÀNG CHÌNH TỪ THIỆN</p>\r\n                        <div className=\"button_wapper \">\r\n                            <a type=\"button\" className=\"ant-btn ant-btn-primary btn-find-out-how\" href=\"/explore\"><span className=\"btn-text\">Tìm hiểu cách tham gia</span></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"homepage_list_donate list_donate_hot\">\r\n                <div className=\"container\">\r\n                    <div className=\"list_donate_text  col-10 offset-1 \">\r\n                        <h2 style={{ textAlign: \"center\" }}  className=\"text-bold\">Nổi bật </h2>\r\n                    </div>\r\n                    <div className=\"list_card col-10 offset-1\">\r\n                        <div className=\"row\">\r\n                            {loadingSum ? <HotListDonate listDonates={listDonates}/> : <Spin size=\"large\" />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"homepage_list\">\r\n                <div className=\"container\">\r\n                    <div className=\"list_donate_text col-10 offset-1 \">\r\n                        <h2 style={{ textAlign: \"center\" }} className=\"text-bold\">Các chương trình quyên góp</h2>\r\n                        <Tabs defaultActiveKey=\"1\" size=\"large\" centered onChange={handleClick} style={{ marginBottom: 32, }}>\r\n                            <TabPane tab=\"Tất cả\" key=\"1\">\r\n                            </TabPane>\r\n                           {/*  <TabPane tab=\"Mới nhất\" key=\"2\">\r\n                            </TabPane>\r\n                            <TabPane tab=\"Sắp hết hạn\" key=\"3\">\r\n                            </TabPane> */}\r\n                            {listCategory.map((category) => {\r\n                                return (\r\n                                    <>\r\n                                        <TabPane tab={category.CategoryName} key={category._id}>\r\n\r\n                                        </TabPane>\r\n                                    </>\r\n                                )\r\n                            })}\r\n\r\n                        </Tabs>\r\n                        <div className=\"row all-donate1\" >\r\n                            \r\n                            {loadingSum ? <ListDonate listDonate={listDonate} /> : <Spin size=\"large\" />}\r\n                                                 \r\n                        </div>\r\n                        <Link className=\"ant-btn ant-btn-primary bnt-load-more\" to=\"/tat-ca-chuong-trinh\" >Xem tất cả </Link> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"homepage_app\">\r\n                <div className=\"container\">\r\n                    <div className=\"app_text col-10 offset-1 \">\r\n                        <h2 className=\"text-bold\">Tải ứng dụng trên điện thoại</h2>\r\n                        <p>Tải ứng dụng miễn phí về điện thoại của bạn và bắt đầu ủng hộ cùng chúng tôi</p>\r\n                        <div className=\"img_dowload\">\r\n                            <img src=\"../images/download-ios.png\" alt=\"download-ios\"></img>\r\n                            <img src=\"../images/download-adr.png\" alt=\"download-adr\"></img>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div style={bghomepageRegister} id=\"register\" className=\"homepage_register\">\r\n                <div className=\"container\">\r\n                    <div className=\"register_text col-10 offset-1 \">\r\n                        <h2 className=\"text-bold text-wh \">Hãy tham gia cùng với chúng tôi</h2>\r\n                        <p className=\"text-bold text-wh \">Cùng nhau chia sẽ và giúp đỡ những hoàn cảnh khó khăn</p>\r\n                        {/* <div className=\"form_rs\">\r\n                            <Form form={form}\r\n                                name=\"horizontal_login\"\r\n                                layout=\"inline\"\r\n                        onFinish={onFinish}>\r\n                                <Form.Item\r\n                                    name=\"username\"\r\n                                    rules={[{ required: true, message: 'Please input your username!' }]}\r\n                                >\r\n                                    <Input style={{ width: '255px', height: '40px' }} placeholder=\"Nhâp tên của bạn...\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"email\"\r\n\r\n                                    rules={[\r\n                                        {\r\n                                            type: 'email',\r\n                                            message: 'The input is not valid E-mail!',\r\n                                        },\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your E-mail!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input style={{ width: '255px', height: '40px' }} placeholder=\"Nhập gmail\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"gmail\"\r\n                                    rules={[{ required: true, message: 'Hãy nhập gmail' }]}\r\n                                >\r\n                                    <Input\r\n                                        style={{ width: '255px', height: '40px' }}\r\n                                        type=\"phone\"\r\n                                        placeholder=\"Nhập số điện thoại của bạn\"\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                            </Form>\r\n                            <div className=\"btn_frm_rs\">\r\n                                <Button style={{ width: \"500px\", height: \"45px\", fontSize: \"20px\", fontWeight: \"700\" }}> Tham gia ngay</Button>\r\n                            </div>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"homepage_partner\">\r\n                <div className=\"container\">\r\n                    <div className=\"partner_text col-10 offset-1 \">\r\n                        <h2 style={{ textAlign: \"center\" }} className=\"text-bold\">Các đối tác phi lợi nhuận</h2>\r\n                        <div className=\"wapper_menu\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"operation\" src=\"../images/donate/home/operation.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Operation Smile</p>\r\n                                            <p>Phẫu thuật nụ cười</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"operation\" src=\"../images/donate/home/matran.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Mặt trận Tổ quốc Việt Nam</p>\r\n                                            <p>Uỷ ban Trung ương Mặt trận Tổ quốc Việt Nam</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"suc-manh\" src=\"../images/donate/home/suc-manh.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Sức mạnh 2000</p>\r\n                                            <p>Tiền lẻ mỗi ngày Xây ngay nghìn trường mới</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ marginTop: \"50px\" }} className=\"row\">\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"Vinacapital\" src=\"../images/donate/home/vina.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Vinacapital Foundation</p>\r\n                                            <p>Thay đổi cuộc sống cho phụ nữ và trẻ em Việt Nam</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"vc\" src=\"../images/donate/home/vc.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Trung tâm Tình nguyện Quốc gia</p>\r\n                                            <p>Thúc đẩy đam mê tình nguyện</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"col-4\">\r\n                                    <div className=\"menu_item\">\r\n                                        <div className=\"img\">\r\n                                            <img className=\"logo_partner\" alt=\"tuoi-tre\" src=\"../images/donate/home/tuoi-tre.jpg\"></img>\r\n                                        </div>\r\n                                        <div className=\"menu_item-text\">\r\n                                            <p className=\"text-bold\">Báo Tuổi Trẻ</p>\r\n                                            <p>Cơ quan ngôn luận của Đoàn Thanh niên Cộng sản Thành phố Hồ Chí Minh</p>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Home;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js",["157","158","159","160","161","162"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Progress, Table, Modal, Form, Input, Tabs, Steps, Checkbox, Select, Result, InputNumber, Image, Card, Typography, Badge, Divider, Spin } from 'antd';\r\nimport parse from 'react-html-parser';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport donateEvensts from '../Api/donateEvensts';\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport PayPal from \"../components/Paypal\";\r\nimport Momo from \"../components/Momo\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from \"axios\" \r\nimport \"../style/Momo.scss\"\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\n\r\n\r\n\r\nconst Detail = () => {\r\n    let { _id } = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [DonateID, setDonateID] = useState([]);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const [img, setImg] = useState([]);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [licked, setLicked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [AllDonator, setAllDonator] = useState([]);\r\n    const [AllDonates, setAllDonates] = useState([]);\r\n    const [ArrayDonateCategory, setArrayDonateCategory] = useState([]);\r\n    const [ReleatedPost, setReleatedPost] = useState([]);\r\n    const [loading, setloading] = useState(false);\r\n    const data = useSelector(state => state.login.user);\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const history = useHistory()\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n        setCurrent(0)\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const idCategoryPost = Donate.categoryPost\r\n    useEffect(() => {\r\n\r\n        window.scrollTo(0, 0)\r\n        const fetchData = async () => {\r\n            try {\r\n                await donateEvensts.get(_id).then((res) => {\r\n                    setDonateID(res.data.DonateEnvent)\r\n                    //res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                    setDonate(res.data.DonateEnvent);\r\n                    //console.log('ádas',res.data.DonateEnvent);\r\n                    setImg(res.data.DonateEnvent.image)\r\n\r\n                });\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    setAllDonates(res.data.DonateEnvents);\r\n\r\n                });\r\n\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n        const fetchAllDonater = async () => {\r\n            try {\r\n                await donateEvensts.get50Donater(_id).then((res) => {\r\n                    if (res.data.status === \"success\") {\r\n                        /* res.data.AllDonater.soTienDonate = res.data.AllDonater.soTienDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\"); */\r\n                        setAllDonator(res.data.AllDonater)\r\n                    }\r\n\r\n                })\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch AllDonator data at: \", error);\r\n            }\r\n        }\r\n\r\n        fetchdonatesData();\r\n        fetchData();\r\n        fetchAllDonater();\r\n        //radomDonateEvent()\r\n    }, [licked, _id]);\r\n    console.log(idCategoryPost);\r\n    console.log(Donate);\r\n    useEffect(() => {\r\n\r\n        window.scrollTo(0, 0)\r\n        const fetchCategoryPost = async () => {\r\n            try {\r\n                await donateEvensts.getPostCategory(_id).then((res) => {\r\n                    setReleatedPost(res.data.ReleatedPost)\r\n                });\r\n                setloading(true)\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        fetchCategoryPost();\r\n    }, [idCategoryPost]);\r\n\r\n    console.log(ReleatedPost);\r\n    const phoneSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"84\">+84</Option>\r\n                <Option value=\"85\">+85</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n    //const [value, setValue] = useState(1);\r\n    const checkBtn = () => {\r\n        setLicked(true)\r\n    }\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        setChecked(e.target.checked);\r\n    }\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n        setLicked(false)\r\n    };\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    checkBtn();\r\n                    values['checked'] = checked;\r\n                    values['donateEvent'] = _id;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\" }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", name: `${data.username}`, phone: \"0849119919\" }}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n<Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n<Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"name\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n\r\n                                                    >\r\n                                                        <Input style={{ width: '100%', backgroundColor: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.amountToDonate)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.content}</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n    const convertNumber = (x) => {\r\n        if (Donate === []) {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n        else {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n\r\n    }\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Tên ',\r\n            dataIndex: 'fullName',\r\n            key: 'fullName',\r\n\r\n        },\r\n        {\r\n            title: 'Số tiền ủng hộ (VNĐ)',\r\n            dataIndex: 'amountToDonate',\r\n            key: 'amountToDonate',\r\n            render: text => (\r\n                <>\r\n                    {convertNumber(text)} đ\r\n                </>\r\n            ),\r\n        }\r\n    ];\r\n    let html = Donate.content;\r\n    let happinessContent = Donate.happinessContent\r\n    const viewAll = () => {\r\n        history.push(`/xem-tat-ca-nguoi-ung-ho/${_id}`)\r\n    }\r\n\r\n    const onFinishMomo=(values)=>{\r\n        console.log(\"momo\",values);\r\n        checkBtn();\r\n\r\n        let ms = Date.now()\r\n        values['orderId'] =\"MM\"+ms;\r\n        values['requestId'] =\"MM\"+ms;\r\n        values['checked'] = checked;\r\n        values['orderInfo']=Donate.title;\r\n        values['donateEvent'] = _id;\r\n        donateEvensts.postPayMomo(values).then((res)=>{\r\n            console.log(\"data\",res.data);\r\n            if(res.data.MomoPay.errorCode==0)\r\n            {\r\n                let url = res.data.MomoPay.payUrl\r\n                console.log(\"url\",url);\r\n                window.open(url)\r\n            }\r\n        });\r\n\r\n        console.log(\"Day\",ms);\r\n    }\r\n    const callApi = ()=>{\r\n        let data =\"Test api\";\r\n        axios.post(\"http://localhost:4000/api/payMomoSusess\",data);\r\n    }\r\n    return (\r\n        <>\r\n            <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.title}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"NunitoBold\" }}>\r\n                                Số tiền cần quyên góp {convertNumber(Donate.setAmount)}VNĐ </h3>\r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.summary}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                                <Tabs defaultActiveKey=\"1\"/*  onChange={callback} */>\r\n                                    <TabPane tab=\"Câu chuyện\" key=\"2\">\r\n                                        {parse(parse(html))}\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Nhà hảo tâm\" key=\"3\">\r\n                                        <p>Top 50 lần ủng hộ gần nhất</p>\r\n                                        <Table columns={columns} dataSource={AllDonator} />\r\n                                        <Button onClick={viewAll} >Xem tất cả</Button>\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Trao yêu thương\" key=\"4\">\r\n                                        {parse(parse(happinessContent))}\r\n                                    </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <div className=\"card_infoDonate\">\r\n                                    <h3 className=\"card_infoDonate_title\">Thông tin quyên góp</h3>\r\n\r\n                                    <div className=\"progress_detail_top\">\r\n                                        <p className=\"progress_detail_text\">\r\n                                            Đã quyên góp: {convertNumber(DonateID.currentAmount)}VNĐ/{convertNumber(DonateID.setAmount)}VNĐ\r\n                                        </p>\r\n                                        <Progress percent={Math.floor((Donate.currentAmount / Donate.setAmount) * 100)} showInfo={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                        <div className=\"progress_detail_bot \">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Lượt quyên góp\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Đạt được\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        <UsergroupAddOutlined /> Thời hạn còn\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {Donate.numberOfDonations}\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {((DonateID.currentAmount / DonateID.setAmount) * 100).toFixed(3)}%\r\n                                                    </p>\r\n                                                </div>\r\n                                                <div class=\"col\">\r\n                                                    <p className=\"progress_detail_text\">\r\n                                                        {Number(dayEnd(Donate.endDay)) === 0 || Number(dayEnd(Donate.endDay)) < 0 ? (<>Đã hết hạn</>) : (<> {dayEnd(Donate.endDay)} ngày </>)}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card_donate\">\r\n                                    <h3 className=\"card_donate_title\">Quyên góp ngay</h3>\r\n                                    \r\n                                    <Button onClick={callApi}>Test</Button>\r\n                                    {\r\n                                        Donate.status === \"Dừng nhận donate\" ? (<>\r\n                                            <p className=\"tamngung\" >Tạm ngưng</p>\r\n\r\n                                        </>) : (<>\r\n                                            {\r\n                                                Number(Donate.currentAmount) >= Number(Donate.setAmount) ? (\r\n                                                    <div className=\"progress_detail_top\">\r\n                                                        <p className=\"complete\" >Đã hoàn thành</p>\r\n                                                        <p className=\"progress_detail_text\">\r\n                                                            Đã quyên góp: {convertNumber(DonateID.currentAmount)} VNĐ\r\n                                                        </p>\r\n                                                        <p className=\"progress_detail_number\">\r\n                                                            {Math.floor((DonateID.currentAmount / DonateID.setAmount) * 100) === 100 ? (\r\n                                                                <p>Hoàn thành</p>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    <p className=\"progress_detail_number\">{((DonateID.currentAmount / DonateID.setAmount) * 100).toFixed(3)}%</p>\r\n                                                                </>\r\n                                                            )}\r\n                                                        </p>\r\n                                                        <Progress percent={Math.floor((Donate.currentAmount / Donate.setAmount) * 100)} showInfo={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((Donate.currentAmount / Donate.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                                    </div>\r\n\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <Tabs defaultActiveKey=\"1\" type=\"card\" /* size={size} */>\r\n                                                            <TabPane tab=\"PayPal\" key=\"1\">\r\n                                                                <Steps current={current}>\r\n                                                                    {steps.map(item => (\r\n                                                                        <Step key={item.title} title={item.title} />\r\n                                                                    ))}\r\n                                                                </Steps>\r\n                                                                <div className=\"steps-content\">{steps[current].content()}</div>\r\n                                                                <div className=\"steps-action\">\r\n                                                                    {current < steps.length - 1 && (\r\n                                                                        <Button disabled={\r\n                                                                            licked === true ? (false) : (true)} type=\"primary\" onClick={() => next()}>\r\n                                                                            Tiếp theo\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                    {current === steps.length - 1 && (\r\n                                                                        <Button type=\"primary\" onClick={showModal}>\r\n                                                                            Xác nhận\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                    {current > 0 && (\r\n                                                                        <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                                                            Trở lại\r\n                                                                        </Button>\r\n                                                                    )}\r\n                                                                </div>\r\n                                                            </TabPane>\r\n                                                            <TabPane tab=\"Momo\" key=\"2\">\r\n                                                            <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\" }}\r\n                                    onFinish={onFinishMomo}\r\n                                    ///onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                               \r\n                                            }} >\r\n                                                <Button type=\"primary\" className=\"checkout-title\" htmlType=\"submit\">\r\n                                                    Gửi tiền bằng Ví MoMo\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" className=\"checkout-title\" htmlType=\"submit\">\r\n                                                Gửi tiền bằng Ví MoMo\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", name: `${data.username}`, phone: \"0849119919\" }}\r\n                                            onFinish={onFinishMomo}\r\n                                            //onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n<Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n<Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"name\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n\r\n                                                    >\r\n                                                        <Input style={{ width: '100%', backgroundColor: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                       \r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} className=\"checkout-title\" type=\"primary\" htmlType=\"submit\">\r\n                                                        Gửi tiền bằng Ví MoMo\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button className=\"checkout-title\" type=\"primary\" htmlType=\"submit\">\r\n                                                        Gửi tiền bằng Ví MoMo\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n                    </>\r\n                                                              \r\n                                                            </TabPane>\r\n                                                        </Tabs>\r\n                                                    </>\r\n\r\n                                                )\r\n                                            }\r\n                                        </>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <Divider></Divider>\r\n            <section className=\"detail_footer\">\r\n                <div className=\"container\">\r\n                    <h3 className=\"detail_footer_title\">Chương trình liên quan</h3>\r\n                    <div className=\"row\">\r\n                        {loading ? (<>\r\n                            {ReleatedPost.map((item) => {\r\n                                return (\r\n                                    <>\r\n\r\n                                        <div className=\"col-3 \" >\r\n                                            <Badge >\r\n                                                <Link to={`${item._id}`} >\r\n                                                    <Card className=\"margin-top\"\r\n                                                        style={{ borderRadius: 10, height: 460 }}\r\n                                                        hoverable\r\n                                                        cover={<img alt=\"example\" src={item.image[0]} />}>\r\n                                                        <Text className=\"title-text\" style={ellipsis ? { width: 250 } : undefined}\r\n                                                            ellipsis={ellipsis ? { tooltip: `${item.title}` } : false} >\r\n                                                            {item.title} </Text>\r\n                                                        <Text className=\"title-tomtat\"\r\n                                                            style={ellipsis ? { width: 250 } : undefined}\r\n                                                            ellipsis={ellipsis ? { tooltip: `${item.summary}` } : false} >\r\n                                                            {item.summary}\r\n                                                        </Text>\r\n                                                        {\r\n                                                            item.status === \"Dừng nhận donate\" ? (<><p className=\"tamngung\" >Tạm ngưng</p></>) : (<>\r\n                                                                <div className=\"progress\">\r\n                                                                    <div className=\"progress_detail_top\">\r\n                                                                        <p className=\"progress_detail_text\">\r\n                                                                            {/* convertNumber */(item.currentAmount)} vnđ quyên góp\r\n                                                                        </p>\r\n                                                                        <p className=\"progress_detail_number\">\r\n                                                                            {Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\r\n                                                                                <p>Hoàn thành</p>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    <p className=\"progress_detail_number\">{((item.currentAmount / item.setAmount) * 100).toFixed(3)}%</p>\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                        </p>\r\n                                                                    </div>\r\n                                                                    <Progress percent={Math.floor((item.currentAmount / item.setAmount) * 100)} showInfo={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                                                    <div className=\"progress_detail_bot\">\r\n                                                                        <p className=\"progress_detail_text\">\r\n                                                                            <UsergroupAddOutlined /> {item.numberOfDonations} lượt quyên góp\r\n                                                                        </p>\r\n                                                                        <p className=\"progress_detail_number\">{Number(dayEnd(item.endDay)) === 0 || Number(dayEnd(item.endDay)) < 0 ? (<>Đã hết hạn</>) : (<> {dayEnd(item.endDay)} ngày còn lại</>)} </p>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </>)\r\n                                                        }\r\n                                                    </Card>\r\n\r\n                                                </Link>\r\n                                            </Badge>\r\n                                        </div>\r\n\r\n                                    </>\r\n                                )\r\n\r\n                            })}\r\n\r\n                        </>) : (<><Spin size=\"large\" /></>)}\r\n\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <Modal title=\"Cám ơn\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Result\r\n                    status=\"success\"\r\n                    title=\"Cám ơn bạn đã quyên góp!\"\r\n                    subTitle=\"Số tiền sẽ được gửi ngay khi chương trình kết thúc !!!\"\r\n\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js",["163"],"import { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history }) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return (null);\r\n}\r\n\r\nexport default  withRouter(ScrollToTop);","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js",[],["164","165"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js",["166"],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/type\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js",["167","168","169","170","171"],"import \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, Progress, Typography, Modal, Form, Input, Button, Steps, message, Checkbox, Select, Result, InputNumber } from 'antd';\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport PayPal from \"../components/Paypal\"\r\nimport { useSelector } from \"react-redux\";\r\n//import ListDonate from \"./ListDonate\";\r\n//import donateEvensts from \"../Api/donateEvensts\";\r\n//import { logout } from \"../redux/actions/auth.js\";\r\nimport \"../style/HotListDonate.scss\";\r\nimport Momo from \"./Momo\";\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst phoneSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n            <Option value=\"84\">+84</Option>\r\n            <Option value=\"85\">+85</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\nconst HotListDonate = (props) => {\r\n    const [donator, setDonator] = useState(null)\r\n    const [id, setid] = useState('');\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [licked, setLicked] = React.useState(false);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const data = useSelector(state => state.login.user);\r\n    const [Listhost, setListhost] = useState(props.listDonates);\r\n    //const [Count, setCount] = useState(0);\r\n    //const order= JSON.parse(localStorage.getItem(\"user\"))\r\n//console.log(order);\r\n    useEffect(() => {\r\n        setListhost(props.listDonates);\r\n    }, [props.listDonates, licked,id])\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n        console.log('Content: ', e.currentTarget.dataset.id);\r\n        let id = e.currentTarget.dataset.id\r\n        let filterProduct = [];\r\n\r\n        filterProduct = props.listDonates.filter(\r\n            listDonates => listDonates._id === id\r\n        )\r\n        //setid(filterProduct[0]._id)\r\n        setid(filterProduct[0]._id);\r\n        setDonator(filterProduct)\r\n        setLicked(false)\r\n\r\n\r\n\r\n    };\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        setCurrent(0)\r\n        \r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setLicked(false)\r\n        setCurrent(0)\r\n    };\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n        setLicked(false)\r\n    };\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        onChange(setChecked(e.target.checked))\r\n\r\n\r\n    }\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n    const checkBtn = () => {\r\n        setLicked(true)\r\n       \r\n    }\r\n    /* if(order){\r\n        setCount(1)\r\n    } */\r\n    console.log(isLoggedIn);\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    checkBtn();\r\n                    values['checked'] = checked;\r\n                    values['donateEvent'] = id;\r\n                    values['orderInfo']= donator[0].title;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", amountToDonate: \"10000\" }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n                                    </Form.Item>\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"fullName\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                \r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n                                            >\r\n                                                <Input autoComplete=\"off\" placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"message\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"amountToDonate\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"message\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", amountToDonate: \"10000\", fullName: `${data.username}`, phone: \"0849119919\" }}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n<Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n<Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"fullName\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{ background: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n\r\n                                                    >\r\n                                                        <Input style={{ width: '100%', backgroundColor: \"#5858583b\" }} readOnly />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"message\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button onClick={checkBtn} type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"amountToDonate\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"message\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.amountToDonate)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.message}</p>\r\n                        <p>Gửi tiền bằng</p>\r\n                        <Momo></Momo>\r\n                        <p>Hoặc</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n\r\nconsole.log(licked);\r\n\r\n    return (\r\n        <>\r\n            {Listhost\r\n            .filter(Listhost => Listhost.hotPost === true)\r\n            .map((item) => {\r\n                /* if (item.tinNoiBat === true) { */\r\n                    return (\r\n                        <>\r\n                            <div key={item._id} className=\"col-6 card\">\r\n                                <Card\r\n                                    key='1'\r\n                                    hoverable\r\n                                    style={{ borderRadius: 10, height: 260, width: \"100%\" }}\r\n                                    cover={<img height=\"100%\" alt=\"example\" src={item.image[0]} />}\r\n                                >\r\n                                    <p style={{ display: \"none\" }} data-id={item._id}></p>\r\n                                    <div className=\"detail\">\r\n                                        <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n                                            <Text className=\"title-text\" style={ellipsis ? { width: 200 } : undefined, {  color: \"#1890ff\" }}\r\n                                                ellipsis={ellipsis ? { tooltip: `${item.title}` } : false} >\r\n                                                {item.title} </Text>\r\n                                        </Link>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n\r\n                                                    {convertNumber(item.currentAmount)\r\n                                                    } VNĐ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{((item.currentAmount / item.setAmount) * 100).toFixed(3)}%</p>\r\n\r\n                                            </div>\r\n                                            <Progress percent={Math.floor((item.currentAmount / item.setAmount) * 100)} showInfo={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (true) : (false)} status={Math.floor((item.currentAmount / item.setAmount) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />{item.numberOfDonations} lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{Number(dayEnd(item.endDay))===0 ||Number(dayEnd(item.endDay))<0 ?(<>Đã hết hạn</>):(<>{dayEnd(item.endDay)} ngày còn lại</>) } </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        {\r\n                                            Number(item.currentAmount) >= Number(item.setAmount) ? (<p className=\"complete\" >Đã hoàn thành</p>) : (<p className=\"ant-btn ant-btn-primary \" data-id={item._id} onClick={showModal}>Ủng hộ ngay</p>)\r\n\r\n                                        }\r\n\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n                        </>)\r\n                /* } */\r\n            })\r\n            }\r\n            {donator != null ? (\r\n                <>\r\n\r\n                    <Modal title={donator[0].title} visible={isModalVisible}footer={null} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <>\r\n                                    {<Button className=\"btn-disabled\" disabled={\r\n                                        licked ===true?(false):(true) } \r\n                                        type=\"primary\" onClick={() => next()}>\r\n                                        Tiếp theo\r\n                                    </Button>}\r\n                                </>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Modal title={\"ủng hộ\"} visible={isModalVisible}  onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={onChange, () => next()}>\r\n                                    Tiếp theo\r\n                                </Button>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nexport default HotListDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js",["172"],"import React, { createRef, useState } from 'react';\r\nimport { Modal, Form, Input, Button, message } from 'antd';\r\nimport { LockOutlined } from '@ant-design/icons';\r\nimport '../style/Profile.scss';\r\nimport donateEvensts from '../Api/donateEvensts';\r\nconst Profile = () => {\r\n    const [Error, setError] = useState(\"\");\r\n    /* const normFile = (e) => {\r\n\r\n        if (Array.isArray(e)) {\r\n            setFile(e.fileList[0].name)\r\n\r\n        }\r\n        return e && e.fileList;\r\n\r\n    }; */\r\n    const onFinish = (values) => {\r\n        console.log('Success:', values);\r\n        donateEvensts.putUpdateProfile(values)\r\n        .then((res) => {\r\n            if (res.data.status === \"success\") {\r\n                message.success(\"Cập nhật thông tin thành công !\")\r\n                localStorage.setItem(\"user\", JSON.stringify(res.data.User));\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000)\r\n            }\r\n            if (res.data.status === \"error\") {\r\n                message.success(\"Cập nhật thông tin thành công !\")\r\n                localStorage.setItem(\"user\", JSON.stringify(res.data.User));\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 1000)\r\n            }\r\n        })\r\n        .catch((error)=>{\r\n            console.log(\"Loi nè: \",error);\r\n        })\r\n    };\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const form = createRef();\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    \r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n   const onChangePass =( values)=>{\r\n        donateEvensts.putChangePasss(values).then((res)=>{\r\n            console.log(res);\r\n            if (res.data.status === \"success\") {\r\n                message.success(\"Thay đổi mật khẩu thành công !\")\r\n                setTimeout(() => {\r\n                    handleCancel()\r\n                }, 1000)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error.response.data.error);\r\n            setError(error.response.data.error)\r\n        })\r\n\r\n   }\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    //console.log(user.phone);    \r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col-4\">\r\n\r\n\r\n                </div>\r\n                <div className=\"col-8\">\r\n                    <div className=\"profile\">\r\n\r\n\r\n                        <Form\r\n                            name=\"basic\"\r\n                            labelCol={{ span: 8 }}\r\n                            wrapperCol={{ span: 16 }}\r\n                            initialValues={{ username: `${user.username}`, fullName: `${user.fullName}`, email: `${user.email}`, id: `${user._id}` }}\r\n                            onFinish={onFinish}\r\n                            onFinishFailed={onFinishFailed}\r\n                        >\r\n                            <Form.Item\r\n                                name=\"id\"\r\n                                hidden\r\n                            >\r\n                                <Input readOnly autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <p>Tên tài khoản:</p>\r\n                            <Form.Item\r\n                                name=\"username\"\r\n                            >\r\n                                <Input readOnly autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <p>Họ và tên:</p>\r\n                            <Form.Item\r\n                                name=\"fullName\"\r\n                            >\r\n                                <Input autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <p>Gmail:</p>\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                            >\r\n                                <Input autoComplete={\"off\"} />\r\n                            </Form.Item>\r\n                            <Form.Item\r\n\r\n                            >\r\n                                <Button onClick={showModal}>Đổi mật khẩu</Button>\r\n                            </Form.Item>\r\n                            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Cập nhật\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Modal className=\"model_pass\" footer={null} title=\"Đổi mật khẩu\" visible={isModalVisible} onCancel={handleCancel}>\r\n                <Form\r\n                    name=\"normal_resgiter\"\r\n                    className=\"resgiter-form\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onChangePass}\r\n                    ref={form}\r\n                >\r\n                    <p style={{ color: \"red\" }}>{Error}</p> \r\n                    <Form.Item\r\n                        label=\"Mật khẩu cũ\"\r\n                        name=\"oldPassword\"\r\n                        rules={[\r\n                            { required: true, message: 'Hãy nhập mật khẩu!' },\r\n                            { min: 8, message: 'Mật khẩu phải đủ 8 kí tự' }\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Mật khẩu mới\"\r\n                        name=\"newPassword\"\r\n                        rules={[\r\n                            { required: true, message: 'Hãy nhập mật khẩu!' },\r\n                            { min: 8, message: 'Mật khẩu phải đủ 8 kí tự' }\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Nhập lại mật khẩu\"\r\n                        name=\"passwordConfirm\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Hãy nhập mật khẩu !',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                    if (!value || getFieldValue('newPassword') === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject(new Error('Hai mật khẩu phải trùng nhau !'));\r\n                                },\r\n                            }),\r\n                        ]}>\r\n                        <Input\r\n                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                            type=\"password\"\r\n\r\n                            autoComplete=\"off\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Đổi mật khẩu\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js",["173","174","175"],"import React from 'react';\r\nimport {Table} from \"antd\"\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\nconst Historydonate = (props) => {\r\n    const columns = [\r\n        {\r\n          title: 'Tiêu đề bài viết',\r\n          dataIndex: 'tieuDe',\r\n          key: 'tieude',\r\n        },\r\n        {\r\n          title: 'Ngày bắt đầu',\r\n          dataIndex: 'ngayBatSau',\r\n          key: 'ngayBatSau',\r\n        },\r\n        {\r\n          title: 'Ngày kết thúc',\r\n          dataIndex: 'ngayKetThuc',\r\n          key: 'ngayKetThuc',\r\n        },\r\n        {\r\n            title: 'Số tiền đã ủng hộ(VNĐ)',\r\n            dataIndex: 'soTienCanDonate',\r\n            key: 'soTienCanDonate',\r\n          },\r\n          {\r\n            title: 'Số tiền đã quyên góp được(VNĐ)',\r\n            dataIndex: 'soTienDonateHieTai',\r\n            key: 'soTienDonateHieTai',\r\n          },\r\n          {\r\n            title: 'Trạng thai',\r\n            dataIndex: 'trangThai',\r\n            key: 'trangThai',\r\n          },\r\n      ];\r\nconsole.log(props.Historydonate);\r\n    return (\r\n       <>\r\n       \r\n       </>\r\n    );\r\n}\r\n\r\nexport default Historydonate;\r\n",["176","177"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Contact.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\AllDonate.js",["178"],"import React, { useEffect, useState } from 'react';\r\nimport {  Spin, Tabs } from 'antd';\r\nimport { CheckOutlined } from '@ant-design/icons';\r\nimport donateEvensts from '../Api/donateEvensts';\r\n//import { Link } from \"react-router-dom\";\r\nimport \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\n//import PayPal from \"../components/Paypal\"\r\n//import HotListDonate from \"../components/HotListDonate\"\r\nimport ListAll from '../components/ListALl';\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\n//import { useSelector } from 'react-redux';\r\n//import { Redirect } from 'react-router-dom';\r\nimport ScrollToTopApi from '../Api/ScrollToTop';\r\nconst { TabPane } = Tabs;\r\nconst AllDonate = () => {\r\n    const [listDonates, setListdonates] = useState([]);\r\n    const [listDonate, setListdonate] = useState([]);\r\n    const [listCategory, setListCategory] = useState([]);\r\n    const [loadingSum, setLoadingSum] = useState(false);\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    \r\n                    setListdonates(res.data.DonateEnvents);\r\n                    setListdonate(res.data.DonateEnvents)\r\n                });\r\n                setLoadingSum(true)\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n\r\n        const fetchCategory = async () => {\r\n            try {\r\n                await donateEvensts.getCategory().then((res) => {\r\n                    setListCategory(res.data.CategoryDonateEvents)\r\n                });\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n\r\n        fetchCategory();\r\n        fetchdonatesData();\r\n\r\n    }, []);\r\n    const handleClick = (e) => {\r\n        setListdonate(listDonates);\r\n        let filterProduct = [];\r\n        if (e === \"1\") {\r\n            filterProduct = listDonates;\r\n        } else {\r\n\r\n            filterProduct = listDonates.filter(\r\n                listDonates => listDonates.categoryPost === e\r\n            )\r\n            setListdonate(filterProduct)\r\n            console.log(filterProduct);\r\n\r\n\r\n        }\r\n    };\r\n    for (let i = 0; i < listDonate.length; i++) {\r\n        for (let j = 0; j < listCategory.length; j++) {\r\n            if (listDonate[i].categoryPost === listCategory[j]._id) {\r\n                listDonate[i].categoryName = listCategory[j].CategoryName;\r\n            }\r\n\r\n        }\r\n    }\r\n    const sumConinDonate = ()=>{\r\n        let sum = 0\r\n        for (let i = 0; i < listDonates.length; i++) {\r\n             sum =sum+  Number(listDonates[i].currentAmount);\r\n            \r\n        }\r\n        return sum.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")\r\n    }\r\n    const iconStyle = {\r\n        color: \"#2569d9\"\r\n    }\r\n    return (\r\n        <>\r\n            <ScrollToTop smooth={true} />\r\n          \r\n            <div className=\"homepage container-sm\">\r\n                <div className=\"homepage_content col-10 offset-1 \">\r\n                    <div>\r\n                        <h2 className=\"title\" >Hãy quyên góp cho những hoạt động mà bạn quan tâm</h2>\r\n                    </div>\r\n                    <div className=\"commitment\">\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />0% phí dịch vụ</p></div>\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />Thiết kế cho mục đích từ thiệt</p></div>\r\n                        <div className=\"commitment__tick\"><p><CheckOutlined style={iconStyle} />Được nhiều tổ chức từ thiện tin tưởng</p></div>\r\n                    </div>\r\n                    <div className=\"button\">\r\n                        <div className=\"button_wapper \">\r\n                            <a type=\"button\" className=\"ant-btn ant-btn-primary btn-explore\" href=\"/explore\"><span className=\"btn-text\">Tìm hiểu về tổ chức từ thiện</span></a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text_wapper\">\r\n                        <p className=\"text-bold \">Chúng tôi đã quyên góp được</p>\r\n                        <h2 className=\"text-bold\"><span>{sumConinDonate()} VNĐ</span></h2>\r\n                        <div className=\"icon-micro-heart\"><img width=\"50px\" alt=\"Heart\" src=\"../images/hands.svg\" /></div>\r\n                        <div className=\"mb-1x\"><span className=\"text-medium\"><div className=\"html-sanitizer\">Hãy giúp chúng thôi một tay</div></span></div>\r\n                        <div className=\"text_wapper-about\"><a href=\"/about-us\"><span className=\"text-bold text-uppercase\">Tìm hiểu về chúng tôi</span></a></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"homepage_list\">\r\n                <div className=\"container\">\r\n                    <div className=\"list_donate_text col-10 offset-1 \">\r\n                        <h2 style={{ textAlign: \"center\" }} className=\"text-bold\">Các chương trình quyên góp</h2>\r\n                        <Tabs defaultActiveKey=\"1\" size=\"large\" centered onChange={handleClick} style={{ marginBottom: 32, }}>\r\n                            <TabPane tab=\"Tất cả\" key=\"1\">\r\n                            </TabPane>\r\n                            {/*  <TabPane tab=\"Mới nhất\" key=\"2\">\r\n                            </TabPane>\r\n                            <TabPane tab=\"Sắp hết hạn\" key=\"3\">\r\n                            </TabPane> */}\r\n                            {listCategory.map((category) => {\r\n                                return (\r\n                                    <>\r\n                                        <TabPane tab={category.CategoryName} key={category._id}>\r\n\r\n                                        </TabPane>\r\n                                    </>\r\n                                )\r\n                            })}\r\n                        </Tabs>\r\n                        <div className=\"row all-donate\" >\r\n                           \r\n                            {loadingSum ? <ListAll listDonate={listDonate} /> : <Spin size=\"large\" />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AllDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListALl.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListRadom.js",["179","180","181","182","183","184","185","186","187"],"\r\nimport React, { useState, /* useEffect */ } from 'react';\r\nimport { Card, Progress, Typography, Badge, Input } from 'antd';\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nconst ListRadom = (props) => {\r\n    const [list, /* setlist */] = useState([props.listDonate]);\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const dayEnd = (day) => {\r\n        const currentDay = new Date();\r\n        let endtDay = Date.parse(day)\r\n        let ngayconlai = (endtDay - currentDay.getTime()) / 1000;\r\n        return Math.floor((ngayconlai / 60) / 60 / 24)\r\n\r\n    }\r\n    console.log(list);\r\n    return (\r\n        <>  \r\n\r\n             \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListRadom;\r\n",["188","189"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\ListDonator.js",["190","191","192","193","194","195"],"import React, { useEffect, useState } from 'react';\r\nimport { Table,  Image} from 'antd';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport donateEvensts from '../Api/donateEvensts';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\n\r\nconst ListDonator = () => {\r\n    let { _id } = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [DonateID, setDonateID] = useState([]);\r\n    //const { isLoggedIn } = useSelector(state => state.login);\r\n    const [img, setImg] = useState([]);\r\n\r\n    const [licked, setLicked] = React.useState(false);\r\n\r\n    const [AllDonator, setAllDonator] = useState([]);\r\n    const [AllDonates, setAllDonates] = useState([]);\r\n   \r\n    const [ReleatedPost, setReleatedPost] = useState([]);\r\n    const [loading, setloading] = useState(false);\r\n    const data = useSelector(state => state.login.user);\r\n    const idCategoryPost = Donate.categoryPost\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0)\r\n        const fetchData = async () => {\r\n            try {\r\n                await donateEvensts.get(_id).then((res) => {\r\n                    setDonateID(res.data.DonateEnvent)\r\n                    //res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                    setDonate(res.data.DonateEnvent);\r\n                    //console.log('ádas',res.data.DonateEnvent);\r\n                    setImg(res.data.DonateEnvent.image)\r\n\r\n                });\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        const fetchdonatesData = async () => {\r\n            try {\r\n                await donateEvensts.getAll().then((res) => {\r\n                    setAllDonates(res.data.DonateEnvents);\r\n\r\n                });\r\n\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch brand data at: \", error);\r\n            }\r\n        };\r\n        const fetchAllDonater = async () => {\r\n            try {\r\n                await donateEvensts.getAllDonater(_id).then((res) => {\r\n                    if (res.data.status === \"success\") {\r\n                       \r\n                        setAllDonator(res.data.AllDonater)\r\n                    }\r\n\r\n                })\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch AllDonator data at: \", error);\r\n            }\r\n        }\r\n\r\n        fetchdonatesData();\r\n        fetchData();\r\n        fetchAllDonater();\r\n        //radomDonateEvent()\r\n    }, [licked, _id]);\r\n    console.log(idCategoryPost);\r\n    console.log(Donate);\r\n    useEffect(() => {\r\n\r\n        window.scrollTo(0, 0)\r\n        const fetchCategoryPost = async () => {\r\n            try {\r\n                await donateEvensts.getPostCategory(_id).then((res) => {\r\n                    setReleatedPost(res.data.ReleatedPost)\r\n                });\r\n                setloading(true)\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        fetchCategoryPost();\r\n    }, [idCategoryPost]);\r\n\r\n    console.log(ReleatedPost);\r\n  \r\n    \r\n    const convertNumber = (x) => {\r\n        if (Donate === []) {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n        else {\r\n            if (Donate.setAmount) {\r\n                return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n            }\r\n        }\r\n\r\n    }\r\n   \r\n    const columns = [\r\n        {\r\n            title: 'Tên ',\r\n            dataIndex: 'fullName',\r\n            key: 'fullName',\r\n\r\n        },\r\n        {\r\n            title: 'Số tiền ủng hộ (VNĐ)',\r\n            dataIndex: 'amountToDonate',\r\n            key: 'amountToDonate',\r\n            render: text => (\r\n                <>\r\n                    {convertNumber(text)} đ\r\n                </>\r\n            ),\r\n        }\r\n    ];\r\n   \r\n    return (\r\n        <>\r\n         <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.title}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"NunitoBold\" }}>\r\n                                Số tiền cần quyên góp {convertNumber(Donate.setAmount)}VNĐ </h3>\r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.summary}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                            <Table columns={columns} dataSource={AllDonator} />\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </section>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListDonator;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Momo.js",["196","197","198","199"],"\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../style/Momo.scss\"\r\nconst Momo = () => {\r\n    const getData = JSON.parse(localStorage.getItem(\"data\"));\r\n    let ms = Date.now()\r\n    getData['orderId'] =\"MM\"+ms;\r\n    getData['requestId'] =\"MM\"+ms;\r\n    //getData['checked'] = checked;\r\n    //getData['orderInfo']=Donate.title;\r\n    //getData['donateEvent'] = _id;\r\n    console.log(getData);\r\n    const PayMomo = () => {\r\n        const url = \"http://localhost:4000/api/payMomo\";\r\n        axios.post(url,getData).then((res)=>{\r\n            console.log(\"data\",res.data);\r\n            if(res.data.MomoPay.errorCode==0)\r\n            {\r\n                let url = res.data.MomoPay.payUrl\r\n                console.log(\"url\",url);\r\n                window.open(url)\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <div class=\"checkout-button\">\r\n            <div class=\"content\" >\r\n                <p onClick={PayMomo} class=\"checkout-title\">\r\n                    Thanh toán bằng Ví MoMo\r\n                </p>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Momo;\r\n",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":19,"column":8,"nodeType":"206","messageId":"207","endLine":19,"endColumn":19},{"ruleId":"208","severity":1,"message":"209","line":55,"column":6,"nodeType":"210","endLine":55,"endColumn":8,"suggestions":"211"},{"ruleId":"204","severity":1,"message":"212","line":2,"column":16,"nodeType":"206","messageId":"207","endLine":2,"endColumn":21},{"ruleId":"204","severity":1,"message":"213","line":2,"column":23,"nodeType":"206","messageId":"207","endLine":2,"endColumn":29},{"ruleId":"204","severity":1,"message":"214","line":85,"column":12,"nodeType":"206","messageId":"207","endLine":85,"endColumn":16},{"ruleId":"204","severity":1,"message":"215","line":10,"column":8,"nodeType":"206","messageId":"207","endLine":10,"endColumn":12},{"ruleId":"204","severity":1,"message":"216","line":38,"column":12,"nodeType":"206","messageId":"207","endLine":38,"endColumn":22},{"ruleId":"204","severity":1,"message":"217","line":39,"column":12,"nodeType":"206","messageId":"207","endLine":39,"endColumn":31},{"ruleId":"204","severity":1,"message":"218","line":39,"column":33,"nodeType":"206","messageId":"207","endLine":39,"endColumn":55},{"ruleId":"208","severity":1,"message":"219","line":120,"column":8,"nodeType":"210","endLine":120,"endColumn":24,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":502,"column":42,"nodeType":"223","messageId":"224","endLine":502,"endColumn":44},{"ruleId":"208","severity":1,"message":"225","line":12,"column":6,"nodeType":"210","endLine":12,"endColumn":8,"suggestions":"226"},{"ruleId":"200","replacedBy":"227"},{"ruleId":"202","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":5,"column":1,"nodeType":"231","endLine":18,"endColumn":2},{"ruleId":"204","severity":1,"message":"232","line":76,"column":11,"nodeType":"206","messageId":"207","endLine":76,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":431,"column":118,"nodeType":"235","messageId":"236","endLine":431,"endColumn":119},{"ruleId":"233","severity":1,"message":"234","line":487,"column":77,"nodeType":"235","messageId":"236","endLine":487,"endColumn":78},{"ruleId":"233","severity":1,"message":"234","line":511,"column":73,"nodeType":"235","messageId":"236","endLine":511,"endColumn":74},{"ruleId":"233","severity":1,"message":"234","line":516,"column":77,"nodeType":"235","messageId":"236","endLine":516,"endColumn":78},{"ruleId":"204","severity":1,"message":"232","line":46,"column":11,"nodeType":"206","messageId":"207","endLine":46,"endColumn":19},{"ruleId":"204","severity":1,"message":"237","line":2,"column":9,"nodeType":"206","messageId":"207","endLine":2,"endColumn":14},{"ruleId":"204","severity":1,"message":"238","line":3,"column":7,"nodeType":"206","messageId":"207","endLine":3,"endColumn":13},{"ruleId":"204","severity":1,"message":"239","line":8,"column":11,"nodeType":"206","messageId":"207","endLine":8,"endColumn":18},{"ruleId":"200","replacedBy":"240"},{"ruleId":"202","replacedBy":"241"},{"ruleId":"204","severity":1,"message":"242","line":14,"column":8,"nodeType":"206","messageId":"207","endLine":14,"endColumn":22},{"ruleId":"204","severity":1,"message":"243","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":14},{"ruleId":"204","severity":1,"message":"244","line":3,"column":16,"nodeType":"206","messageId":"207","endLine":3,"endColumn":24},{"ruleId":"204","severity":1,"message":"245","line":3,"column":38,"nodeType":"206","messageId":"207","endLine":3,"endColumn":43},{"ruleId":"204","severity":1,"message":"212","line":3,"column":45,"nodeType":"206","messageId":"207","endLine":3,"endColumn":50},{"ruleId":"204","severity":1,"message":"246","line":4,"column":10,"nodeType":"206","messageId":"207","endLine":4,"endColumn":30},{"ruleId":"204","severity":1,"message":"247","line":5,"column":10,"nodeType":"206","messageId":"207","endLine":5,"endColumn":14},{"ruleId":"204","severity":1,"message":"248","line":10,"column":13,"nodeType":"206","messageId":"207","endLine":10,"endColumn":17},{"ruleId":"204","severity":1,"message":"249","line":11,"column":12,"nodeType":"206","messageId":"207","endLine":11,"endColumn":20},{"ruleId":"204","severity":1,"message":"250","line":12,"column":11,"nodeType":"206","messageId":"207","endLine":12,"endColumn":17},{"ruleId":"200","replacedBy":"251"},{"ruleId":"202","replacedBy":"252"},{"ruleId":"204","severity":1,"message":"253","line":14,"column":12,"nodeType":"206","messageId":"207","endLine":14,"endColumn":20},{"ruleId":"204","severity":1,"message":"254","line":18,"column":20,"nodeType":"206","messageId":"207","endLine":18,"endColumn":29},{"ruleId":"204","severity":1,"message":"216","line":21,"column":12,"nodeType":"206","messageId":"207","endLine":21,"endColumn":22},{"ruleId":"204","severity":1,"message":"255","line":24,"column":12,"nodeType":"206","messageId":"207","endLine":24,"endColumn":19},{"ruleId":"204","severity":1,"message":"256","line":25,"column":11,"nodeType":"206","messageId":"207","endLine":25,"endColumn":15},{"ruleId":"208","severity":1,"message":"219","line":89,"column":8,"nodeType":"210","endLine":89,"endColumn":24,"suggestions":"257"},{"ruleId":"204","severity":1,"message":"258","line":2,"column":17,"nodeType":"206","messageId":"207","endLine":2,"endColumn":23},{"ruleId":"204","severity":1,"message":"259","line":2,"column":25,"nodeType":"206","messageId":"207","endLine":2,"endColumn":34},{"ruleId":"204","severity":1,"message":"260","line":2,"column":36,"nodeType":"206","messageId":"207","endLine":2,"endColumn":44},{"ruleId":"221","severity":1,"message":"222","line":18,"column":42,"nodeType":"223","messageId":"224","endLine":18,"endColumn":44},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"no-unused-vars","'ScrollToTop' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["263"],"'Input' is defined but never used.","'Button' is defined but never used.","'form' is assigned a value but never used.","'Momo' is defined but never used.","'AllDonates' is assigned a value but never used.","'ArrayDonateCategory' is assigned a value but never used.","'setArrayDonateCategory' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.",["264"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["265"],["261"],["262"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'handleOk' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Table' is defined but never used.","'layout' is assigned a value but never used.","'columns' is assigned a value but never used.",["261"],["262"],"'ScrollToTopApi' is defined but never used.","'Card' is defined but never used.","'Progress' is defined but never used.","'Badge' is defined but never used.","'UsergroupAddOutlined' is defined but never used.","'Link' is defined but never used.","'Text' is assigned a value but never used.","'ellipsis' is assigned a value but never used.","'dayEnd' is assigned a value but never used.",["261"],["262"],"'DonateID' is assigned a value but never used.","'setLicked' is assigned a value but never used.","'loading' is assigned a value but never used.","'data' is assigned a value but never used.",["266"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"269","fix":"273"},"Update the dependencies array to be: [dispatch]",{"range":"274","text":"275"},"Update the dependencies array to be: [_id, idCategoryPost]",{"range":"276","text":"277"},"Update the dependencies array to be: [history]",{"range":"278","text":"279"},{"range":"280","text":"277"},[2123,2125],"[dispatch]",[4507,4523],"[_id, idCategoryPost]",[279,281],"[history]",[3155,3171]]