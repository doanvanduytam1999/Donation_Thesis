[{"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js":"1","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js":"2","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js":"3","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js":"4","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js":"5","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js":"6","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js":"7","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js":"8","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js":"9","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js":"10","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js":"11","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js":"12","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js":"13","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js":"14","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js":"15","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js":"16","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js":"17","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js":"18","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Login.js":"19","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js":"20","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js":"21","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js":"22","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js":"23","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js":"24","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js":"25","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js":"26","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js":"27","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js":"28"},{"size":718,"mtime":1624614279324,"results":"29","hashOfConfig":"30"},{"size":375,"mtime":1624076310741,"results":"31","hashOfConfig":"30"},{"size":2673,"mtime":1625260890073,"results":"32","hashOfConfig":"30"},{"size":4313,"mtime":1625283472666,"results":"33","hashOfConfig":"30"},{"size":7225,"mtime":1624076310739,"results":"34","hashOfConfig":"30"},{"size":17090,"mtime":1625297546766,"results":"35","hashOfConfig":"30"},{"size":16997,"mtime":1625294641282,"results":"36","hashOfConfig":"30"},{"size":266,"mtime":1625290642505,"results":"37","hashOfConfig":"30"},{"size":350,"mtime":1624076310738,"results":"38","hashOfConfig":"30"},{"size":615,"mtime":1625293046477,"results":"39","hashOfConfig":"30"},{"size":1933,"mtime":1625289846310,"results":"40","hashOfConfig":"30"},{"size":516,"mtime":1625258833190,"results":"41","hashOfConfig":"30"},{"size":166,"mtime":1624456360714,"results":"42","hashOfConfig":"30"},{"size":1090,"mtime":1625118950735,"results":"43","hashOfConfig":"30"},{"size":371,"mtime":1624467488953,"results":"44","hashOfConfig":"30"},{"size":317,"mtime":1624456000973,"results":"45","hashOfConfig":"30"},{"size":26088,"mtime":1625288021339,"results":"46","hashOfConfig":"30"},{"size":4280,"mtime":1624860445922,"results":"47","hashOfConfig":"30"},{"size":2983,"mtime":1625119423977,"results":"48","hashOfConfig":"30"},{"size":3629,"mtime":1625119163285,"results":"49","hashOfConfig":"30"},{"size":856,"mtime":1625313340647,"results":"50","hashOfConfig":"30"},{"size":1663,"mtime":1625286637490,"results":"51","hashOfConfig":"30"},{"size":10792,"mtime":1625284735707,"results":"52","hashOfConfig":"30"},{"size":4530,"mtime":1625312749608,"results":"53","hashOfConfig":"30"},{"size":3503,"mtime":1625119482662,"results":"54","hashOfConfig":"30"},{"size":1191,"mtime":1625305179309,"results":"55","hashOfConfig":"30"},{"size":606,"mtime":1625259365415,"results":"56","hashOfConfig":"30"},{"size":498,"mtime":1625261035331,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"1v8q40h",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"61"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"61"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\index.js",["131"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { useEffect } from 'react';\r\nimport { CookiesProvider } from 'react-cookie';\r\nReactDOM.render(\r\n  <CookiesProvider>\r\n  <Provider store={store}>\r\n    \r\n    <App />\r\n  </Provider>\r\n  </CookiesProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["132","133"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\reportWebVitals.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\App.js",["134","135","136"],"import './App.css';\r\nimport Header from './components/Header';\r\nimport 'antd/dist/antd.css';\r\nimport Home from './pages/Home';\r\nimport Footer from './components/Footer';\r\nimport { BrowserRouter as Router, Route, Switch,Redirect } from \"react-router-dom\";\r\nimport Detail from './pages/Detail';\r\nimport Login from './pages/Login';\r\nimport Resgister from './pages/Resgister';\r\nimport Profile from './pages/Profile'\r\nimport React,{useState, useEffect} from 'react';\r\nimport ScrollToTop from \"react-scroll-to-top\";\r\nimport firebase from 'firebase';\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport { unwrapResult } from '@reduxjs/toolkit';\r\nimport { getMe } from './redux/reducer/UserSlice';\r\n\r\nimport { login } from \"./redux/actions/auth.js\";\r\n\r\n// Configure Firebase.\r\nconst config = {\r\n  apiKey: 'AIzaSyBuvMsY6qXN0XOR2pjo9g0YJ9JC5yfh9rE',\r\n  authDomain: 'fashionshop-11d42.firebaseapp.com',\r\n  // ...\r\n};\r\nfirebase.initializeApp(config);\r\nfunction App() {\r\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\r\n  const { isLoggedIn } = useSelector(state => state.login);\r\n  const dispatch = useDispatch();\r\n  // Listen to the Firebase Auth state and set the local state.\r\n  useEffect(() => {\r\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async (user) => {\r\n      setIsSignedIn(!!user);\r\n      if(!user){\r\n        console.log(\"Chưa đăng nhập\");\r\n        return\r\n      }\r\n      try {\r\n        const actionResult = await dispatch(getMe());\r\n        const currentUser = unwrapResult(actionResult);\r\n        localStorage.setItem(\"user\", JSON.stringify(currentUser));\r\n        console.log('Logged in user: ', currentUser);\r\n       \r\n      } catch (error) {\r\n        console.log('Failed to login ', error.message);\r\n        // show toast error\r\n      }\r\n      console.log(\"Đã đăng nhập\");\r\n    });\r\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\r\n    \r\n  }, []);\r\n  if(isLoggedIn){\r\n    <Redirect to=\"/\" />\r\n\r\n  }\r\n  return (\r\n   \r\n    <Router>\r\n       <ScrollToTop smooth />\r\n        <Header />\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n\r\n        </Route>\r\n        <Switch>\r\n        <Route exact path=\"/thong-tin-chi-tiet/:_id\">\r\n          <Detail />\r\n        </Route>\r\n        <Route exact path=\"/thong-tin-tai-khoan\">\r\n          <Profile />\r\n        </Route>\r\n        <Route exact path=\"/dang-nhap\">\r\n          <Login />\r\n        </Route>\r\n        <Route exact path=\"/dang-ki\">\r\n          <Resgister />\r\n        </Route>\r\n        </Switch>\r\n        <Footer />\r\n     \r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Header.js",["137"],"import React from 'react';\r\nimport { Menu, Row, Col, Button, Dropdown, Badge } from 'antd';\r\n//import { AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport { DownOutlined, BellOutlined } from '@ant-design/icons';\r\nimport \"../style/Header.scss\";\r\nimport { Link,Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../redux/actions/auth.js\";\r\nimport ModalLogin from './ModalLogin';\r\nimport firebase from 'firebase';\r\n\r\n\r\n/* const handleClick = (e) => {\r\n    console.log(e.target);\r\n} */\r\nconst style = {\r\n    fontSize: \"20px\",\r\n    fontWeight: \"500\",\r\n    height: \"65px\",\r\n    lineHeight: \"65px\",\r\n    zIndex: '1000',\r\n\r\n}\r\n\r\n\r\nconst Header = () => {\r\n    const { isLoggedIn } = useSelector((state) => state.login);\r\n    const dispatch = useDispatch();\r\n    const data = useSelector(state => state.login.user);\r\n    const logOut = () => {\r\n        <Redirect to=\"/\" />\r\n        dispatch(logout());\r\n        firebase.auth().signOut();\r\n        localStorage.removeItem('user');\r\n    };\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <Link to=\"\">Trang chủ</Link>\r\n            </Menu.Item>\r\n            <Menu.Item >\r\n                <Link to=\"/thong-tin-tai-khoan\">Thông tin tài khoản</Link>\r\n            </Menu.Item>\r\n            <Menu.Item danger >\r\n                <Link onClick={logOut}>Đăng xuất</Link>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n    const notification = (\r\n        <Menu>\r\n            <Menu.Item>\r\n                <Link to=\"\">Trang chủ</Link>\r\n            </Menu.Item>\r\n            <Menu.Item >\r\n                <Link to=\"/thong-tin-tai-khoan\">Thông tin tài khoản</Link>\r\n            </Menu.Item>\r\n            <Menu.Item danger >\r\n                <Link onClick={logOut}>Đăng xuất</Link>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n    <Redirect to=\"/\" />\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24} >\r\n                    <Menu style={style} /* onClick={handleClick} */ selectedKeys={\"hehe\"} mode=\"horizontal\">\r\n                        <Menu.Item className=\"logo-item\" key=\"mail\">\r\n                            <Link to=\"\"><img alt=\"logo\" style={{ marginLeft: '30px' }} width=\"40px\" src=\"../images/logo.png\" ></img></Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"app\">\r\n                            Gây quỷ\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"about\">\r\n                            Về chúng thôi\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"contact\">\r\n                            Liên hệ\r\n                        </Menu.Item>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Menu.Item className=\"right\" key=\"sign-up\" >\r\n                                    <ModalLogin />\r\n                                </Menu.Item>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Menu.Item className=\"right-lg\" key=\"notification\"  >\r\n\r\n                                    <Dropdown overlay={notification} trigger={['click']}>\r\n                                        <a href=\"#/\" className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                                            <Badge size=\"default\" count={5}>\r\n                                                <BellOutlined style={{ fontSize: \"30px\" }} />\r\n                                            </Badge>\r\n                                        </a>\r\n                                    </Dropdown>\r\n                                </Menu.Item>\r\n                                <Dropdown className='right' overlay={menu}>\r\n                                    <a href=\"#/\" className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                                        {data.username} <DownOutlined />\r\n                                    </a>\r\n                                </Dropdown>\r\n\r\n                            </>\r\n                        )}\r\n                    </Menu>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Footer.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Home.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Detail.js",["138","139","140"],"import React, { useEffect, useState } from 'react';\r\nimport { Button,  Table, Modal, Form, Input, Tabs, Steps, Checkbox, Select, Result, InputNumber, Image } from 'antd';\r\nimport parse from 'react-html-parser';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport \"../style/Detail.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport donateEvensts from '../Api/donateEvensts';\r\nimport PayPal from \"../components/Paypal\";\r\nimport ListDonate from '../components/ListDonate';\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { TextArea } = Input;\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst columns = [\r\n    {\r\n      title: 'Tên ',\r\n      dataIndex: 'tenNguoiDonate',\r\n      key: 'tenNguoiDonate',\r\n      \r\n    },\r\n    {\r\n      title: 'Số tiền ủng hộ (VNĐ)',\r\n      dataIndex: 'soTienDonate',\r\n      key: 'soTienDonate',\r\n    }\r\n  ];\r\n  \r\n  \r\nconst Detail = () => {\r\n    let { _id } = useParams();\r\n    const [Donate, setDonate] = useState([]);\r\n    const [img, setImg] = useState([]);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [AllDonator, setAllDonator] = useState([]);\r\n    const showModal = () => {\r\n      setIsModalVisible(true);\r\n      setCurrent(0)\r\n    };\r\n    const handleOk = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n    useEffect(() => {\r\n        window.scrollTo(0,0)\r\n        const fetchData = async () => {\r\n            try {\r\n                await donateEvensts.get(_id).then((res) => {\r\n                    res.data.DonateEnvent.soTienCanDonate = res.data.DonateEnvent.soTienCanDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n                    setDonate(res.data.DonateEnvent);\r\n                    //console.log('ádas',res.data.DonateEnvent);\r\n                    setImg(res.data.DonateEnvent.hinhAnh)\r\n                    \r\n                });\r\n            } catch (error) {\r\n                console.log(\"Failed to fetch Donate data at: \", error);\r\n            }\r\n        };\r\n        const fetchAllDonater= async()=>{\r\n            try{\r\n                await donateEvensts.getAllDonater(_id).then((res)=>{\r\n                    if(res.data.status===\"success\"){\r\n                        /* res.data.AllDonater.soTienDonate = res.data.AllDonater.soTienDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\"); */\r\n                        setAllDonator(res.data.AllDonater)\r\n                    }\r\n                    \r\n                })\r\n            } catch(error){\r\n                console.log(\"Failed to fetch AllDonator data at: \", error);\r\n            }\r\n        }\r\n        fetchData();\r\n        fetchAllDonater();\r\n    }, []);\r\n   \r\n    AllDonator.forEach(element => {\r\n        element.soTienDonate= element.soTienDonate.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\")+'đ'\r\n\r\n    });\r\n    console.log(AllDonator);\r\n    const phoneSelector = (\r\n        <Form.Item name=\"prefix\" noStyle>\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"84\">+84</Option>\r\n                <Option value=\"85\">+85</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n    //const [value, setValue] = useState(1);\r\n \r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        setChecked(e.target.checked);\r\n\r\n    }\r\n   \r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n    \r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    values['checked'] = checked;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                  \r\n\r\n                };\r\n                return (\r\n                    <>\r\n                        <Form\r\n\r\n                            {...layout}\r\n                            name=\"basic\"\r\n                            initialValues={{ prefix: \"84\", coin: \"10000\", id: `${_id}` }}\r\n                            onFinish={onFinish}\r\n                            onFinishFailed={onFinishFailed}\r\n                        >\r\n                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n                                <Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n                                <Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n                            </Radio.Group> */}\r\n                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                <Checkbox />\r\n\r\n                            </Form.Item>\r\n\r\n\r\n                            {checked === false ? (\r\n                                <>\r\n                                    <Form.Item\r\n                                        label=\"Họ và tên\"\r\n                                        name=\"name\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Họ và tên của bạn\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Số điện thoại\"\r\n                                        name=\"phone\"\r\n\r\n                                    >\r\n                                        <Input placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label=\"Số tiền ủng hộ\"\r\n                                        rules={[\r\n\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                            },\r\n                                        ]}\r\n                                        name=\"coin\">\r\n                                        <InputNumber\r\n                                            \r\n                                            style={{ width: \"200px\" }}\r\n                                            defaultValue={10000}\r\n                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"content\"\r\n                                        label=\"Lời nhắn\"\r\n                                    >\r\n                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                    </Form.Item>\r\n                                    <Form.Item hidden name=\"id\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item wrapperCol={{\r\n                                        xs: { span: 24, offset: 0 },\r\n                                        sm: { span: 16, offset: 8 },\r\n                                    }} >\r\n                                        <Button type=\"primary\"  htmlType=\"submit\">\r\n                                            Xác nhận\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Form.Item hidden name=\"andanh\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n\r\n                                        label=\"Số tiền ủng hộ\"\r\n                                        rules={[\r\n\r\n                                            {\r\n                                                required: true,\r\n                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                            },\r\n                                        ]}\r\n                                        name=\"coin\">\r\n                                        <InputNumber\r\n                                           \r\n                                            style={{ width: \"200px\" }}\r\n                                            defaultValue={10000}\r\n                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label='Lời nhắn'\r\n                                        name=\"content\"\r\n                                    >\r\n                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                    </Form.Item>\r\n                                    <Form.Item hidden name=\"id\">\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Xác nhận\r\n                                        </Button>\r\n                                    </Form.Item>\r\n\r\n                                </>\r\n                            )}\r\n\r\n                        </Form>\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: 100.000đ</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>Cùng nhau chung tay đẩy lùi dịch bệnh</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n    const convertNumber = (x)=>{\r\n        return   x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n     let html= Donate.noiDung;\r\n      \r\n    //console.log(html);\r\n    return (\r\n        <>\r\n            <section className=\"detail_header\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"introduce\">\r\n                            <h3 className=\"title\">{Donate.tieuDe}</h3>\r\n                            <h3 style={{ fontSize: \"25px\", fontFamily: \"inherit\" }}> \r\n                                Số tiền cần quyên góp {Donate.soTienCanDonate}VNĐ </h3>\r\n                      \r\n                           \r\n                          \r\n                            <div class=\"fb-like\" data-href=\"https://momo.vn/cong-dong/chung-tay-gay-quy-dung-truong-moi-tang-25-em-hoc-sinh-ban-huoi-chua\" data-width=\"\" data-layout=\"standard\" data-action=\"like\" data-size=\"small\" data-share=\"true\"></div>\r\n                            <p style={{ fontSize: \"20px\" }}> {Donate.tomTat}</p>\r\n                        </div>\r\n                        <div className=\"slider\">\r\n                            <div style={{ justifyContent: \"space-between\", display: \"flex\" }}>\r\n                                {img.map((item) => {\r\n                                    return (\r\n                                        <Image\r\n                                            style={{ borderRadius: \"10px\" }}\r\n                                            width={400}\r\n                                            src={item}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className=\"detail_body\">\r\n                <div className=\"container\">\r\n                    <div className=\"\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-8\">\r\n                                <Tabs defaultActiveKey=\"1\"/*  onChange={callback} */>\r\n                                    <TabPane tab=\"Câu chuyện\" key=\"2\">\r\n                                        {parse(parse(html))}\r\n                            </TabPane>\r\n                                    <TabPane tab=\"Nhà hảo tâm\" key=\"3\">\r\n                                    <Table columns={columns} dataSource={AllDonator} />\r\n                            </TabPane>\r\n                                    <TabPane tab=\"Các quyên góp khác\" key=\"4\">\r\n                                        Content of Tab Pane 3\r\n                            </TabPane>\r\n                                </Tabs>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <Tabs defaultActiveKey=\"1\" type=\"card\" /* size={size} */>\r\n                                    <TabPane tab=\"Chuyển khoản\" key=\"1\">\r\n                                        <Steps current={current}>\r\n                                            {steps.map(item => (\r\n                                                <Step key={item.title} title={item.title} />\r\n                                            ))}\r\n                                        </Steps>\r\n                                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                                        <div className=\"steps-action\">\r\n                                            {current < steps.length - 1 && (\r\n                                                <Button type=\"primary\" onClick={() => next()}>\r\n                                                    Tiếp theo\r\n                                                </Button>\r\n                                            )}\r\n                                            {current === steps.length - 1 && (\r\n                                                <Button type=\"primary\" onClick={showModal}>\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            )}\r\n                                            {current > 0 && (\r\n                                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                                    Trở lại\r\n                                                </Button>\r\n                                            )}\r\n                                        </div>\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"Momo\" key=\"2\">\r\n                                        Content of card tab 2\r\n                                </TabPane>\r\n\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <Modal title=\"Cám ơn\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n      </Modal>                                   \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\AxiosClient.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\ScrollToTop.js",["141"],"import { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history }) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return (null);\r\n}\r\n\r\nexport default  withRouter(ScrollToTop);",["142","143"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\donateEvensts.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Paypal.js",["144"],"import React, { useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nconst Paypal = () => {\r\n    const paypal = useRef();\r\n    const getData = JSON.parse(localStorage.getItem(\"data\"))\r\n   const vndToUsd =(getData.coin/23000).toFixed(2);\r\n\r\n    console.log(vndToUsd);\r\n    useEffect(() => {\r\n        window.paypal\r\n            .Buttons({\r\n                createOrder: (data, actions, err) => {\r\n                    return actions.order.create({\r\n                        intent: \"CAPTURE\",\r\n                        purchase_units: [\r\n                            {\r\n                                description: `${getData.id}`,\r\n                                amount: {\r\n                                    currency_code: \"USD\",\r\n                                    value: `${vndToUsd}`,\r\n                                },\r\n                            },\r\n                        ],\r\n                    });\r\n                },\r\n                onApprove: async (data, actions) => {\r\n                    const order = await actions.order.capture();\r\n                    console.log(order.status);\r\n                    const url='http://localhost:4000/donate';\r\n                    if(order.status ===\"COMPLETED\"){\r\n                        console.log(\"abc\");\r\n                        axios.post(url,{\r\n                            data: getData\r\n                        },{headers: {\r\n                            'Content-Type': 'application/json'\r\n                          },\r\n                          withCredentials: true})\r\n                    }\r\n                    \r\n\r\n\r\n                },\r\n                onError: (err) => {\r\n                    console.log(err);\r\n                },\r\n            })\r\n            .render(paypal.current);\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div ref={paypal}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paypal;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\store.js",["145","146","147","148"],"import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport LoginReducer from \"./redux/reducer/auth\";\r\nimport {configureStore} from \"@reduxjs/toolkit\"\r\nimport thunk from \"redux-thunk\";\r\nimport UserReducer from \"./redux/reducer/UserSlice\";\r\n//import reducer from \"./redux/reducer\";\r\nconst middleware = [thunk];\r\n\r\n\r\nconst store = configureStore({\r\n  reducer:{\r\n    login : LoginReducer,\r\n    user :UserReducer\r\n  }\r\n  \r\n});\r\n\r\nexport default store;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\index.js",[],["149","150"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\auth.js",["151"],"import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n  } from \"../actions/type\";\r\n\r\n  const user =  JSON.parse(localStorage.getItem(\"user\"));\r\n \r\n  const initialState =user\r\n    ? { isLoggedIn: true, user }\r\n    : { isLoggedIn: false, user: null };\r\n  \r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case REGISTER_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case REGISTER_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case LOGIN_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: true,\r\n          user: payload.user,\r\n        };\r\n      case LOGIN_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      case LOGOUT:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\message.js",["152"],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/type\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\type.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\HotListDonate.js",["153","154","155","156","157"],"import \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport React, {  useState } from 'react';\r\nimport { Card, Progress, Typography, Modal, Form, Input, Button, Steps, message, Checkbox, Select, Result, InputNumber } from 'antd';\r\nimport { UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { Link } from \"react-router-dom\";\r\nimport PayPal from \"../components/Paypal\"\r\nimport {  useSelector } from \"react-redux\";\r\n//import { logout } from \"../redux/actions/auth.js\";\r\n\r\nconst { Option } = Select;\r\nconst { Step } = Steps;\r\nconst { Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\nconst phoneSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n            <Option value=\"84\">+84</Option>\r\n            <Option value=\"85\">+85</Option>\r\n        </Select>\r\n    </Form.Item>\r\n);\r\nconst HotListDonate = (props) => {\r\n    const [donator, setDonator] = useState(null)\r\n    const [id, setid] = useState('');\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const [current, setCurrent] = React.useState(0);\r\n    const [licked, /* setLicked */] = React.useState(false);\r\n    const [checked, setChecked] = React.useState(false);\r\n    const [value, setValue] = useState(1);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    const data = useSelector(state => state.login.user);\r\n\r\n    console.log(data);\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n        console.log('Content: ', e.currentTarget.dataset.id);\r\n        let id = e.currentTarget.dataset.id\r\n        let filterProduct = [];\r\n\r\n        filterProduct = props.listDonates.filter(\r\n            listDonates => listDonates._id === id\r\n        )\r\n        //setid(filterProduct[0]._id)\r\n        setid(filterProduct[0]._id);\r\n        setDonator(filterProduct)\r\n\r\n\r\n\r\n\r\n    };\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        setCurrent(0)\r\n        window.location.reload();\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        window.location.reload();\r\n    };\r\n    const next = () => {\r\n        setCurrent(current + 1);\r\n    };\r\n    const prev = () => {\r\n        setCurrent(current - 1);\r\n    };\r\n    const handlechecked = (e) => {\r\n        console.log(`checked = ${e.target.checked}`);\r\n        onChange(setChecked(e.target.checked))\r\n\r\n\r\n    }\r\n    const onChange = e => {\r\n        console.log('changed', value);\r\n        let a = value;\r\n        setValue(a)\r\n\r\n    };\r\n\r\n    const steps = [\r\n        {\r\n            title: 'Nhập thông tin',\r\n            content: () => {\r\n                const onFinish = (values) => {\r\n                    console.log('Success:', values);\r\n                    values['checked'] = checked;\r\n                    const data = JSON.stringify(values)\r\n                    localStorage.setItem(\"data\", data);\r\n                };\r\n                const onFinishFailed = (errorInfo) => {\r\n                    console.log('Failed:', errorInfo.values.name);\r\n                };\r\n                return (\r\n                    <>\r\n                        {isLoggedIn === false ? (\r\n                            <>\r\n                                <Form\r\n\r\n                                    {...layout}\r\n                                    name=\"basic\"\r\n                                    initialValues={{ prefix: \"84\", coin: \"10000\", id: `${id}` }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n    <Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n    <Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                    <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                        <Checkbox />\r\n\r\n                                    </Form.Item>\r\n\r\n\r\n                                    {checked === false ? (\r\n                                        <>\r\n                                            <Form.Item\r\n                                                label=\"Họ và tên\"\r\n                                                name=\"name\"\r\n                                                rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                            >\r\n                                                <Input placeholder=\"Họ và tên của bạn\" />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label=\"Số điện thoại\"\r\n                                                name=\"phone\"\r\n\r\n                                            >\r\n                                                <Input placeholder=\"Nhập số điện thoại của bạn \" addonBefore={phoneSelector} style={{ width: '100%' }} />\r\n                                            </Form.Item>\r\n\r\n                                            <Form.Item\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"coin\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                name=\"content\"\r\n                                                label=\"Lời nhắn\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item wrapperCol={{\r\n                                                xs: { span: 24, offset: 0 },\r\n                                                sm: { span: 16, offset: 8 },\r\n                                            }} >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Form.Item hidden name=\"andanh\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n\r\n                                                label=\"Số tiền ủng hộ\"\r\n                                                rules={[\r\n\r\n                                                    {\r\n                                                        required: true,\r\n                                                        message: 'Hãy nhập số tiền ủng hộ',\r\n                                                    },\r\n                                                ]}\r\n                                                name=\"coin\">\r\n                                                <InputNumber\r\n                                                    onChange={onChange}\r\n                                                    style={{ width: \"200px\" }}\r\n                                                    defaultValue={10000}\r\n                                                    formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                    parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                />\r\n                                            </Form.Item>\r\n                                            <Form.Item\r\n                                                label='Lời nhắn'\r\n                                                name=\"content\"\r\n                                            >\r\n                                                <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                            </Form.Item>\r\n                                            <Form.Item hidden name=\"id\">\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item >\r\n                                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                                    Xác nhận\r\n                                                </Button>\r\n                                            </Form.Item>\r\n\r\n                                        </>\r\n                                    )}\r\n\r\n                                </Form>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {data !== [] ? (\r\n                                    <>\r\n                                        <Form\r\n\r\n                                            {...layout}\r\n                                            name=\"basic\"\r\n                                            initialValues={{ prefix: \"84\", coin: \"10000\", id: `${id}`,name:`${data.username}`, phone:\"0849119919\" }}\r\n                                            onFinish={onFinish}\r\n                                            onFinishFailed={onFinishFailed}\r\n                                        >\r\n                                            {/*  <Radio.Group onChange={onChange} buttonStyle=\"solid\" defaultValue=\"a\">\r\n<Radio.Button value=\"a\">Cá nhân</Radio.Button>\r\n<Radio.Button value=\"b\">Tổ chức</Radio.Button>\r\n\r\n</Radio.Group> */}\r\n                                            <Form.Item label='Ủng hộ ẩn danh' onChange={handlechecked}>\r\n                                                <Checkbox />\r\n\r\n                                            </Form.Item>\r\n\r\n\r\n                                            {checked === false ? (\r\n                                                <>\r\n                                                    <Form.Item\r\n                                                        label=\"Họ và tên\"\r\n                                                        name=\"name\"\r\n                                                        rules={[{ required: true, message: 'Hãy nhập họ tên của bạn !' }]}\r\n                                                    >\r\n                                                        <Input style={{background:\"#5858583b\"}} readOnly/>\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label=\"Số điện thoại\"\r\n                                                        name=\"phone\"\r\n\r\n                                                    >\r\n                                                        <Input  style={{ width: '100%',backgroundColor:\"#5858583b\" }}readOnly />\r\n                                                    </Form.Item>\r\n\r\n                                                    <Form.Item\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"coin\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name=\"content\"\r\n                                                        label=\"Lời nhắn\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắn (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item wrapperCol={{\r\n                                                        xs: { span: 24, offset: 0 },\r\n                                                        sm: { span: 16, offset: 8 },\r\n                                                    }} >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </>\r\n                                            ) : (\r\n                                                <>\r\n                                                    <Form.Item hidden name=\"andanh\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n\r\n                                                        label=\"Số tiền ủng hộ\"\r\n                                                        rules={[\r\n\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message: 'Hãy nhập số tiền ủng hộ',\r\n                                                            },\r\n                                                        ]}\r\n                                                        name=\"coin\">\r\n                                                        <InputNumber\r\n                                                            onChange={onChange}\r\n                                                            style={{ width: \"200px\" }}\r\n                                                            defaultValue={10000}\r\n                                                            formatter={value => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n                                                            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label='Lời nhắn'\r\n                                                        name=\"content\"\r\n                                                    >\r\n                                                        <TextArea placeholder=\"Lời nhắc (không bắt buộc)\" autoSize={{ minRows: 3 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item hidden name=\"id\">\r\n                                                        <Input />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item >\r\n                                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                                            Xác nhận\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n\r\n                                                </>\r\n                                            )}\r\n\r\n                                        </Form>\r\n                                    </>\r\n                                ) : (<><p></p></>)}\r\n\r\n                            </>\r\n                        )\r\n                        }\r\n\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Xác nhận',\r\n            content: () => {\r\n                const coin = JSON.parse(localStorage.getItem(\"data\"));\r\n\r\n                return (\r\n                    <>\r\n                        <p>Số tiền ủng hộ: {convertNumber(coin.coin)}</p>\r\n                        <p>Lời nhắn:</p>\r\n                        <p>{coin.content}</p>\r\n                        <PayPal />\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n        {\r\n            title: 'Cám ơn',\r\n            content: () => {\r\n                return (\r\n                    <>\r\n                        <Result\r\n                            status=\"success\"\r\n                            title=\"Cám ơn bạn đã quyên góp!\"\r\n                            subTitle=\"Số tiền sẽ được gửI ngay khi hoàn thành mục tiêu !!!\"\r\n\r\n                        />\r\n\r\n                    </>\r\n                )\r\n\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            {props.listDonates.map((item) => {\r\n                if (item.tinNoiBat === true) {\r\n                    return (\r\n                        <>\r\n                            <div key='1' className=\"col-6 card\">\r\n                                <Card\r\n                                    key='1'\r\n                                    hoverable\r\n                                    style={{ borderRadius: 10, height: 260, width: \"100%\" }}\r\n                                    cover={<img height=\"100%\" alt=\"example\" src={item.hinhAnh[0]} />}\r\n                                >\r\n                                    <p style={{ display: \"none\" }} data-id={item._id}></p>\r\n                                    <div className=\"detail\">\r\n                                        <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n                                            <Text style={ellipsis ? { width: 200 } : undefined, { fontWeight: \"500\", fontSize: \"18px\", color: \"#1890ff\" }}\r\n                                                ellipsis={ellipsis ? { tooltip: `${item.tieuDe}` } : false} >\r\n                                                {item.tieuDe} </Text>\r\n                                        </Link>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n\r\n                                                    {convertNumber(item.soTienDonateHieTai)\r\n                                                    } VNĐ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">{Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)}%</p>\r\n                                            </div>\r\n                                            <Progress percent={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)} showInfo={false} status=\"active\" />\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">ngày còn lại</p>\r\n                                            </div>\r\n                                        </div>\r\n                                        <p className=\"ant-btn ant-btn-primary \" data-id={item._id} onClick={showModal}>Ủng hộ ngay</p>\r\n                                    </div>\r\n                                </Card>\r\n                            </div>\r\n                        </>)\r\n                }\r\n            })\r\n            }\r\n            {donator != null ? (\r\n                <>\r\n\r\n                    <Modal title={donator[0].tieuDe} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <>\r\n                                    {licked === false ? (<> <Button type=\"primary\" onClick={() => next()}>\r\n                                        Tiếp theo ffd\r\n                                    </Button></>) : (\r\n                                        <>\r\n                                            <Button type=\"primary\" onClick={() => next()}>\r\n                                                Tiếp theo\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n\r\n                                </>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Modal title={\"ủng hộ\"} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <Steps current={current}>\r\n                            {steps.map(item => (\r\n                                <Step key={item.title} title={item.title} />\r\n                            ))}\r\n                        </Steps>\r\n                        <div className=\"steps-content\">{steps[current].content()}</div>\r\n                        <div className=\"steps-action\">\r\n                            {current < steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={onChange, () => next()}>\r\n                                    Tiếp theo\r\n                                </Button>\r\n                            )}\r\n                            {current === steps.length - 1 && (\r\n                                <Button type=\"primary\" onClick={handleCancel, () => message.success('Processing complete!')}>\r\n                                    Hoàn thành\r\n                                </Button>\r\n                            )}\r\n                            {current > 0 && (\r\n                                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>\r\n                                    Trở lại\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\nexport default HotListDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ListDonate.js",["158","159"],"import React from 'react';\r\nimport { Card, Progress, Typography, Badge, } from 'antd';\r\nimport {  UsergroupAddOutlined } from '@ant-design/icons';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../style/Home.scss\";\r\nimport \"../style/bootstrap-grid.min.css\";\r\nconst ListDonate = (props) => {\r\n    const { Text } = Typography;\r\n    const [ellipsis, /* setEllipsis */] = React.useState(true);\r\n    const convertNumber = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n    return (\r\n        <>\r\n            {props.listDonate.map((item) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"col-4 \" >\r\n                            <Badge count={item.tenLoai}>\r\n                                <Link to={`thong-tin-chi-tiet/${item._id}`} >\r\n\r\n                                    <Card className=\"margin-top\"\r\n                                        style={{ borderRadius: 10, height: 460 }}\r\n                                        hoverable\r\n                                        cover={<img alt=\"example\" src={item.hinhAnh[0]} />}>\r\n                                        <Text style={ellipsis ? { width: 250 } : undefined, { fontWeight: \"500\", fontSize: \"18px\" }}\r\n                                            ellipsis={ellipsis ? { tooltip: 'Xem chi tiết !' } : false} >\r\n                                            {item.tieuDe} </Text>\r\n                                        <Text\r\n                                            style={ellipsis ? { width: 250 } : undefined,{fontFamily: \"cursive\"}}\r\n                                            ellipsis={ellipsis ? { tooltip: 'Xem chi tiết !' } : false} >\r\n                                            {item.tomTat}\r\n                                        </Text>\r\n                                        <div className=\"progress\">\r\n                                            <div className=\"progress_detail_top\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    {convertNumber(item.soTienDonateHieTai)} vnđ quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">\r\n\r\n                                                    {Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (\r\n                                                        <p>Hoàn thành</p>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <p>\r\n                                                                {Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)}%\r\n                                                            </p>\r\n\r\n                                                        </>\r\n\r\n                                                    )}\r\n\r\n                                                </p>\r\n                                            </div>\r\n\r\n                                            <Progress percent={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100)} showInfo={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (true) : (false)} status={Math.floor((item.soTienDonateHieTai / item.soTienCanDonate) * 100) === 100 ? (\"success\") : (\"normal\")} />\r\n                                            <div className=\"progress_detail_bot\">\r\n                                                <p className=\"progress_detail_text\">\r\n                                                    <UsergroupAddOutlined />lượt quyên góp\r\n                                                </p>\r\n                                                <p className=\"progress_detail_number\">ngày còn lại</p>\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                    </Card>\r\n\r\n                                </Link>\r\n                            </Badge>\r\n                        </div>\r\n                    </>\r\n                )\r\n\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ListDonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Login.js",["160"],"import React,{useState} from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect,useHistory } from 'react-router-dom';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport  {login} from \"../redux/actions/auth.js\";\r\n\r\n\r\n\r\nconst Login = () => {\r\n\r\n    //const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { isLoggedIn } = useSelector(state => state.auth);\r\n    //const  message  = useSelector(state => state.auth.user);\r\n    const history = useHistory();\r\n\r\n    const onFinish = (values) => {\r\n       \r\n        //setLoading(true);\r\n        dispatch(login(values))\r\n        .then(() => {\r\n          history.push(\"/\");\r\n          //window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          //setLoading(false);\r\n          console.log(\"Loi đăng nhập\");\r\n        });\r\n        \r\n\r\n        console.log('Received values of form: ', values.username);\r\n    };\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\" />;\r\n      }\r\n    return (\r\n        <>\r\n            <Row className='login-container'>\r\n                <Col className=\"login-form-wrapper\" offset={6} span={10}>\r\n                    <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 16 }}\r\n                        name=\"normal_login\"\r\n                        className=\"login-form\"\r\n                        initialValues={{ remember: true }}\r\n                        onFinish={onFinish}\r\n                    >\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            rules={[{ required: true, message: 'Please input your Username!' }]}\r\n                        >\r\n                            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            rules={[{ required: true, message: 'Please input your Password!' }]}\r\n                        >\r\n                            <Input\r\n                                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                            />\r\n                        </Form.Item>\r\n\r\n\r\n                        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                Log in\r\n                            </Button>\r\n                            Or <a href=\"#/\">register now!</a>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Resgister.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\services\\autl.services.js",["161"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\actions\\auth.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\ModalLogin.js",["162","163","164","165","166","167"],"import React, { useState } from 'react';\r\nimport { Modal, Form, Input, Button, Row, Col, Tabs } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\nimport firebase from 'firebase';\r\nimport { useHistory,Redirect } from 'react-router-dom';\r\nimport \"../style/bootstrap-grid.min.css\";\r\nimport { login,register } from \"../redux/actions/auth.js\";\r\nimport \"../style/ModalLogin.scss\";\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n    // Popup signin flow rather than redirect flow.\r\n    signInFlow: 'popup',\r\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n    signInSuccessUrl: '/thong-tin-tai-khoan',\r\n    // We will display Google and Facebook as auth providers.\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n    ],\r\n  };\r\nconst { TabPane } = Tabs;\r\nconst ModalLogin = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const { isLoggedIn } = useSelector(state => state.login);\r\n    //const [Key, setKey] = useState(\"\");\r\n    //const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    //const { isLoggedIn } = useSelector(state => state.auth);\r\n    //const message = useSelector(state => state.auth.user);\r\n    const history = useHistory();\r\n    const showModal = (e) => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n   \r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n\r\n    };\r\n    const onFinish = (values) => {\r\n        //setLoading(true);\r\n        dispatch(login(values))\r\n            .then(() => {\r\n                history.push(\"/\");\r\n                //window.location.reload();\r\n            })\r\n            .catch(() => {\r\n                //setLoading(false);\r\n                console.log(\"Loi đăng nhập\");\r\n            });\r\n\r\n\r\n        console.log('Received values of form: ', values.username);\r\n    };\r\n    const onResgiter =(values)=>{\r\n        console.log(values);\r\n        dispatch(register(values)).then(()=>{\r\n            console.log(\"dăng kí\");\r\n        })\r\n        .catch(()=>{\r\n            console.log(\"dang ki that bai\");\r\n        })\r\n    }\r\n    const Facebook = props => (\r\n        <a href=\"#/\" id=\"facebookIcon\"></a>\r\n    );\r\n    const Twitter = props => (\r\n        <a href=\"#/\" id=\"twitterIcon\"></a>\r\n    );\r\n    const Google = props => (\r\n        <a href=\"#/\" id=\"googleIcon\"></a>\r\n    );\r\n    if(isLoggedIn !==null){\r\n        <Redirect to=\"/\" />\r\n    \r\n      }\r\n    return (\r\n        <>\r\n            <Button className=\"ant-btn-login\" data-id=\"1\" type=\"primary\" onClick={showModal}>\r\n                Đăng nhập / Đăng kí\r\n            </Button>\r\n            {/* <Button className=\"ant-btn-resgister\" data-id=\"2\" type=\"primary\" onClick={showModal}>\r\n                Đăng kí\r\n            </Button> */}\r\n            <Modal visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}\r\n                width={450} footer={null}\r\n            >\r\n                <Row>\r\n                    <Col span={16} offset={4}  >\r\n                        <Tabs /* onChange={callback} */>\r\n                            <TabPane tab=\"Đăng nhập\" key=\"1\">\r\n                                <Form\r\n                                    name=\"normal_login\"\r\n                                    className=\"login-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <p>Tài khoảng </p>\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập tài khoản!' }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Tài khoảng\" autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p>Mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập mật khẩu!' }]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Mật khẩu\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                            Đăng nhập\r\n                                        </Button>\r\n                                       \r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </TabPane>\r\n                            <TabPane tab=\"Đăng kí\" key=\"2\">\r\n                                <Form\r\n                                    name=\"normal_resgiter\"\r\n                                    className=\"resgiter-form\"\r\n                                    initialValues={{ remember: true }}\r\n                                    onFinish={onResgiter}\r\n                                >\r\n                                    <p>Tài khoản </p>\r\n                                    <Form.Item\r\n                                        name=\"username\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập tài khoản!' }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Tài khoảng\" autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p>Mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập mật khẩu!' }]}\r\n                                    >\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Mật khẩu\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <p>Nhập lại mật khẩu</p>\r\n                                    <Form.Item\r\n                                        name=\"passwordcf\"\r\n                                        rules={[\r\n                                            {\r\n                                              required: true,\r\n                                              message: 'Hãy nhập mật khẩu !',\r\n                                            },\r\n                                            ({ getFieldValue }) => ({\r\n                                              validator(_, value) {\r\n                                                if (!value || getFieldValue('password') === value) {\r\n                                                  return Promise.resolve();\r\n                                                }\r\n                                                return Promise.reject(new Error('Hai mật khẩu phải trùng nhau !'));\r\n                                              },\r\n                                            }),\r\n                                          ]}>\r\n                                        <Input\r\n                                            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"Nhập lại mật khẩu\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                    <p>Họ và tên</p>\r\n                                    <Form.Item\r\n                                        name=\"name\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập họ tên !' }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Họ tên\" autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <p>Số điện thoại</p>\r\n                                    <Form.Item\r\n                                        name=\"phone\"\r\n                                        rules={[{ required: true, message: 'Hãy nhập số điện thoại!' }]}\r\n                                    >\r\n                                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Số điện thoại\" autoComplete=\"off\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item >\r\n                                        <Button type=\"primary\" htmlType=\"submit\" className=\"resgister-form-button\">\r\n                                            Đăng kí\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </TabPane>\r\n                        </Tabs>\r\n                        <div className=\"login-with\">\r\n                            <label>Or sign in with:</label>\r\n                            <div id=\"iconGroup\">\r\n                               {/*  <Facebook />\r\n                                <Twitter />\r\n                                <Google /> */}\r\n                                 <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default ModalLogin;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\pages\\Profile.js",["168","169","170","171"],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Profilecpn.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\components\\Historydonate.js",["172","173","174"],"import React from 'react';\r\nimport {Table} from \"antd\"\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\nconst Historydonate = (props) => {\r\n    const columns = [\r\n        {\r\n          title: 'Tiêu đề bài viết',\r\n          dataIndex: 'tieuDe',\r\n          key: 'tieude',\r\n        },\r\n        {\r\n          title: 'Ngày bắt đầu',\r\n          dataIndex: 'ngayBatSau',\r\n          key: 'ngayBatSau',\r\n        },\r\n        {\r\n          title: 'Ngày kết thúc',\r\n          dataIndex: 'ngayKetThuc',\r\n          key: 'ngayKetThuc',\r\n        },\r\n        {\r\n            title: 'Số tiền đã ủng hộ(VNĐ)',\r\n            dataIndex: 'soTienCanDonate',\r\n            key: 'soTienCanDonate',\r\n          },\r\n          {\r\n            title: 'Số tiền đã quyên góp được(VNĐ)',\r\n            dataIndex: 'soTienDonateHieTai',\r\n            key: 'soTienDonateHieTai',\r\n          },\r\n          {\r\n            title: 'Trạng thai',\r\n            dataIndex: 'trangThai',\r\n            key: 'trangThai',\r\n          },\r\n      ];\r\nconsole.log(props.Historydonate);\r\n    return (\r\n       <>\r\n       \r\n       </>\r\n    );\r\n}\r\n\r\nexport default Historydonate;\r\n","G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\redux\\reducer\\UserSlice.js",[],"G:\\Code\\LVTN\\LVTN\\Donation_Thesis\\client\\src\\Api\\UserApi.js",[],{"ruleId":"175","severity":1,"message":"176","line":8,"column":10,"nodeType":"177","messageId":"178","endLine":8,"endColumn":19},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"175","severity":1,"message":"183","line":18,"column":10,"nodeType":"177","messageId":"178","endLine":18,"endColumn":15},{"ruleId":"175","severity":1,"message":"184","line":28,"column":10,"nodeType":"177","messageId":"178","endLine":28,"endColumn":20},{"ruleId":"185","severity":1,"message":"186","line":53,"column":6,"nodeType":"187","endLine":53,"endColumn":8,"suggestions":"188"},{"ruleId":"175","severity":1,"message":"189","line":2,"column":26,"nodeType":"177","messageId":"178","endLine":2,"endColumn":32},{"ruleId":"175","severity":1,"message":"190","line":9,"column":8,"nodeType":"177","messageId":"178","endLine":9,"endColumn":18},{"ruleId":"185","severity":1,"message":"191","line":81,"column":8,"nodeType":"187","endLine":81,"endColumn":10,"suggestions":"192"},{"ruleId":"175","severity":1,"message":"193","line":283,"column":11,"nodeType":"177","messageId":"178","endLine":283,"endColumn":24},{"ruleId":"185","severity":1,"message":"194","line":12,"column":6,"nodeType":"187","endLine":12,"endColumn":8,"suggestions":"195"},{"ruleId":"179","replacedBy":"196"},{"ruleId":"181","replacedBy":"197"},{"ruleId":"185","severity":1,"message":"198","line":48,"column":8,"nodeType":"187","endLine":48,"endColumn":10,"suggestions":"199"},{"ruleId":"175","severity":1,"message":"200","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":21},{"ruleId":"175","severity":1,"message":"201","line":1,"column":23,"nodeType":"177","messageId":"178","endLine":1,"endColumn":38},{"ruleId":"175","severity":1,"message":"202","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":29},{"ruleId":"175","severity":1,"message":"203","line":8,"column":7,"nodeType":"177","messageId":"178","endLine":8,"endColumn":17},{"ruleId":"179","replacedBy":"204"},{"ruleId":"181","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":15,"column":3,"nodeType":"208","endLine":50,"endColumn":4},{"ruleId":"206","severity":1,"message":"207","line":5,"column":1,"nodeType":"208","endLine":18,"endColumn":2},{"ruleId":"209","severity":1,"message":"210","line":395,"column":43,"nodeType":"211","messageId":"212","endLine":395,"endColumn":45},{"ruleId":"213","severity":1,"message":"214","line":409,"column":95,"nodeType":"215","messageId":"216","endLine":409,"endColumn":96},{"ruleId":"213","severity":1,"message":"214","line":464,"column":77,"nodeType":"215","messageId":"216","endLine":464,"endColumn":78},{"ruleId":"213","severity":1,"message":"214","line":488,"column":73,"nodeType":"215","messageId":"216","endLine":488,"endColumn":74},{"ruleId":"213","severity":1,"message":"214","line":493,"column":77,"nodeType":"215","messageId":"216","endLine":493,"endColumn":78},{"ruleId":"213","severity":1,"message":"214","line":27,"column":91,"nodeType":"215","messageId":"216","endLine":27,"endColumn":92},{"ruleId":"213","severity":1,"message":"214","line":31,"column":89,"nodeType":"215","messageId":"216","endLine":31,"endColumn":90},{"ruleId":"175","severity":1,"message":"217","line":1,"column":15,"nodeType":"177","messageId":"178","endLine":1,"endColumn":23},{"ruleId":"206","severity":1,"message":"218","line":36,"column":1,"nodeType":"208","endLine":40,"endColumn":3},{"ruleId":"175","severity":1,"message":"219","line":68,"column":11,"nodeType":"177","messageId":"178","endLine":68,"endColumn":19},{"ruleId":"220","severity":1,"message":"221","line":69,"column":9,"nodeType":"222","endLine":69,"endColumn":40},{"ruleId":"175","severity":1,"message":"223","line":71,"column":11,"nodeType":"177","messageId":"178","endLine":71,"endColumn":18},{"ruleId":"220","severity":1,"message":"221","line":72,"column":9,"nodeType":"222","endLine":72,"endColumn":39},{"ruleId":"175","severity":1,"message":"224","line":74,"column":11,"nodeType":"177","messageId":"178","endLine":74,"endColumn":17},{"ruleId":"220","severity":1,"message":"221","line":75,"column":9,"nodeType":"222","endLine":75,"endColumn":38},{"ruleId":"175","severity":1,"message":"225","line":5,"column":8,"nodeType":"177","messageId":"178","endLine":5,"endColumn":21},{"ruleId":"175","severity":1,"message":"226","line":15,"column":12,"nodeType":"177","messageId":"178","endLine":15,"endColumn":23},{"ruleId":"175","severity":1,"message":"227","line":17,"column":12,"nodeType":"177","messageId":"178","endLine":17,"endColumn":17},{"ruleId":"175","severity":1,"message":"228","line":17,"column":19,"nodeType":"177","messageId":"178","endLine":17,"endColumn":27},{"ruleId":"175","severity":1,"message":"229","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":14},{"ruleId":"175","severity":1,"message":"230","line":3,"column":7,"nodeType":"177","messageId":"178","endLine":3,"endColumn":13},{"ruleId":"175","severity":1,"message":"231","line":8,"column":11,"nodeType":"177","messageId":"178","endLine":8,"endColumn":18},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["232"],"no-negated-in-lhs",["233"],"'login' is defined but never used.","'isSignedIn' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["234"],"'Button' is defined but never used.","'ListDonate' is defined but never used.","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.",["235"],"'convertNumber' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["236"],["232"],["233"],"React Hook useEffect has missing dependencies: 'getData' and 'vndToUsd'. Either include them or remove the dependency array.",["237"],"'createStore' is defined but never used.","'applyMiddleware' is defined but never used.","'composeWithDevTools' is defined but never used.","'middleware' is assigned a value but never used.",["232"],["233"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'useState' is defined but never used.","Assign object to a variable before exporting as module default","'Facebook' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Twitter' is assigned a value but never used.","'Google' is assigned a value but never used.","'HistoryDonate' is defined but never used.","'listDonates' is assigned a value but never used.","'state' is assigned a value but never used.","'setstate' is assigned a value but never used.","'Table' is defined but never used.","'layout' is assigned a value but never used.","'columns' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [dispatch]",{"range":"246","text":"247"},"Update the dependencies array to be: [_id]",{"range":"248","text":"249"},"Update the dependencies array to be: [history]",{"range":"250","text":"251"},"Update the dependencies array to be: [getData, vndToUsd]",{"range":"252","text":"253"},[1989,1991],"[dispatch]",[2848,2850],"[_id]",[279,281],"[history]",[1764,1766],"[getData, vndToUsd]"]